ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR_Seq_0.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_Seq_0_initVar
  18              		.bss
  19              		.type	ADC_SAR_Seq_0_initVar, %object
  20              		.size	ADC_SAR_Seq_0_initVar, 1
  21              	ADC_SAR_Seq_0_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_Seq_0_offset,2,4
  24              		.comm	ADC_SAR_Seq_0_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_Seq_0_channelsConfig, %object
  28              		.size	ADC_SAR_Seq_0_channelsConfig, 4
  29              	ADC_SAR_Seq_0_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_SAR_Seq_0_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_Seq_0_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_Seq_0_Start, %function
  37              	ADC_SAR_Seq_0_Start:
  38              	.LFB0:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_0.c"
   1:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * File Name: ADC_SAR_Seq_0.c
   3:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Version 1.10
   4:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** #include "CyLib.h"
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 2


  19:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** #include "ADC_SAR_Seq_0.h"
  20:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
  22:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /***************************************
  23:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Global data allocation
  24:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ***************************************/
  25:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** uint8 ADC_SAR_Seq_0_initVar = 0u;
  26:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** volatile int16 ADC_SAR_Seq_0_offset[ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM];
  27:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** volatile int32 ADC_SAR_Seq_0_countsPer10Volt[ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM];   /* Gain compensat
  28:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
  30:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /***************************************
  31:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Local data allocation
  32:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ***************************************/
  33:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /* Channels configuration generated by customiser */
  34:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** static const uint32 CYCODE ADC_SAR_Seq_0_channelsConfig[] = { 0x00000000u };
  35:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
  37:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
  38:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_Start
  39:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
  40:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  41:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
  42:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Performs all required initialization for this component
  43:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  and enables the power. The power will be set to the appropriate
  44:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  power based on the clock frequency.
  45:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  46:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
  47:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
  48:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  49:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
  50:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
  51:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  52:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Global variables:
  53:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  The ADC_SAR_Seq_0_initVar variable is used to indicate when/if initial
  54:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  configuration of this component has happened. The variable is initialized to
  55:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  56:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  57:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_SAR_Seq_0_Start() routine.
  58:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  If re-initialization of the component is required the variable should be set
  59:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  to zero before call of ADC_SAR_Seq_0_Start() routine, or the user may call
  60:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_SAR_Seq_0_Init() and ADC_SAR_Seq_0_Enable() as done in the
  61:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_SAR_Seq_0_Start() routine.
  62:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  63:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
  64:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_Start(void)
  65:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
  40              		.loc 1 65 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              	.LCFI0:
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              	.LCFI1:
  49              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 3


  66:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /* If not Initialized then initialize all required hardware and software */
  67:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     if(ADC_SAR_Seq_0_initVar == 0u)
  50              		.loc 1 67 0
  51 0004 064B     		ldr	r3, .L3
  52 0006 1B78     		ldrb	r3, [r3]
  53 0008 002B     		cmp	r3, #0
  54 000a 04D1     		bne	.L2
  68:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     {
  69:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_Init();
  55              		.loc 1 69 0
  56 000c FFF7FEFF 		bl	ADC_SAR_Seq_0_Init
  70:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_initVar = 1u;
  57              		.loc 1 70 0
  58 0010 034B     		ldr	r3, .L3
  59 0012 0122     		mov	r2, #1
  60 0014 1A70     		strb	r2, [r3]
  61              	.L2:
  71:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     }
  72:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_Enable();
  62              		.loc 1 72 0
  63 0016 FFF7FEFF 		bl	ADC_SAR_Seq_0_Enable
  73:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
  64              		.loc 1 73 0
  65 001a BD46     		mov	sp, r7
  66              		@ sp needed for prologue
  67 001c 80BD     		pop	{r7, pc}
  68              	.L4:
  69 001e C046     		.align	2
  70              	.L3:
  71 0020 00000000 		.word	ADC_SAR_Seq_0_initVar
  72              		.cfi_endproc
  73              	.LFE0:
  74              		.size	ADC_SAR_Seq_0_Start, .-ADC_SAR_Seq_0_Start
  75              		.global	__aeabi_idiv
  76              		.section	.text.ADC_SAR_Seq_0_Init,"ax",%progbits
  77              		.align	2
  78              		.global	ADC_SAR_Seq_0_Init
  79              		.code	16
  80              		.thumb_func
  81              		.type	ADC_SAR_Seq_0_Init, %function
  82              	ADC_SAR_Seq_0_Init:
  83              	.LFB1:
  74:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
  76:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
  77:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_Init
  78:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
  79:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  80:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
  81:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Initialize component's parameters to the parameters set by user in the
  82:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  customizer of the component placed onto schematic. Usually called in
  83:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_SAR_Seq_0_Start().
  84:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  85:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
  86:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
  87:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  88:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 4


  89:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
  90:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  91:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Global variables:
  92:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  The ADC_SAR_Seq_0_offset variable is initialized.
  93:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
  94:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_Init(void)
  96:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
  84              		.loc 1 96 0
  85              		.cfi_startproc
  86 0000 90B5     		push	{r4, r7, lr}
  87              	.LCFI2:
  88              		.cfi_def_cfa_offset 12
  89              		.cfi_offset 4, -12
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 0002 85B0     		sub	sp, sp, #20
  93              	.LCFI3:
  94              		.cfi_def_cfa_offset 32
  95 0004 00AF     		add	r7, sp, #0
  96              	.LCFI4:
  97              		.cfi_def_cfa_register 7
  97:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     uint32 chNum;
  98:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     uint32 tmpRegVal;
  99:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     int32 counts;
 100:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 101:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 1u)
 102:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         static const uint8 CYCODE ADC_SAR_Seq_0_InputsPlacement[] =
 103:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         {
 104:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             (uint8)(ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 105:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             (uint8)ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_0_PIN
 106:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             ,(uint8)(ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 107:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****              (uint8)ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_1_PIN
 108:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 2u)
 109:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ,(uint8)(ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 110:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                  (uint8)ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_2_PIN
 111:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #endif /* End ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 2u */
 112:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 3u)
 113:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ,(uint8)(ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 114:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                  (uint8)ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_3_PIN
 115:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #endif /* End ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 3u */
 116:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 4u)
 117:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ,(uint8)(ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 118:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                  (uint8)ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_4_PIN
 119:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #endif /* End ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 4u */
 120:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 5u)
 121:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ,(uint8)(ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 122:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                  (uint8)ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_5_PIN
 123:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #endif /* End ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 5u */
 124:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 6u)
 125:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ,(uint8)(ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 126:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                  (uint8)ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_6_PIN
 127:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #endif /* End ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 6u */
 128:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 7u)
 129:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ,(uint8)(ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 130:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                  (uint8)ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_7_PIN
 131:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #endif /* End ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 7u */
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 5


 132:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 8u)
 133:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ,(uint8)(ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 134:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                  (uint8)ADC_SAR_Seq_0_cy_psoc4_sarmux_8__CH_8_PIN
 135:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #endif /* End ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 8u */
 136:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         };
 137:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #endif /* End ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 1u */
 138:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 139:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #if(ADC_SAR_Seq_0_IRQ_REMOVE == 0u)
 140:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Start and set interrupt vector */
 141:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         CyIntSetPriority(ADC_SAR_Seq_0_INTC_NUMBER, ADC_SAR_Seq_0_INTC_PRIOR_NUMBER);
  98              		.loc 1 141 0
  99 0006 0E20     		mov	r0, #14
 100 0008 0321     		mov	r1, #3
 101 000a FFF7FEFF 		bl	CyIntSetPriority
 142:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         (void)CyIntSetVector(ADC_SAR_Seq_0_INTC_NUMBER, &ADC_SAR_Seq_0_ISR);
 102              		.loc 1 142 0
 103 000e 534B     		ldr	r3, .L14
 104 0010 0E20     		mov	r0, #14
 105 0012 191C     		mov	r1, r3
 106 0014 FFF7FEFF 		bl	CyIntSetVector
 143:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #endif   /* End ADC_SAR_Seq_0_IRQ_REMOVE */
 144:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 145:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /* Init SAR and MUX registers */
 146:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_CHAN_EN_REG = ADC_SAR_Seq_0_DEFAULT_EN_CHANNELS;
 107              		.loc 1 146 0
 108 0018 514B     		ldr	r3, .L14+4
 109 001a 0122     		mov	r2, #1
 110 001c 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_CTRL_REG = ADC_SAR_Seq_0_DEFAULT_CTRL_REG_CFG;
 111              		.loc 1 147 0
 112 001e 514B     		ldr	r3, .L14+8
 113 0020 514A     		ldr	r2, .L14+12
 114 0022 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_SAMPLE_CTRL_REG = ADC_SAR_Seq_0_DEFAULT_SAMPLE_CTRL_REG_CFG;
 115              		.loc 1 148 0
 116 0024 514B     		ldr	r3, .L14+16
 117 0026 524A     		ldr	r2, .L14+20
 118 0028 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_RANGE_THRES_REG = ADC_SAR_Seq_0_DEFAULT_RANGE_THRES_REG_CFG;
 119              		.loc 1 149 0
 120 002a 524B     		ldr	r3, .L14+24
 121 002c 524A     		ldr	r2, .L14+28
 122 002e 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_RANGE_COND_REG  = ADC_SAR_Seq_0_COMPARE_MODE;
 123              		.loc 1 150 0
 124 0030 524B     		ldr	r3, .L14+32
 125 0032 0022     		mov	r2, #0
 126 0034 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_SAMPLE_TIME01_REG = ADC_SAR_Seq_0_DEFAULT_SAMPLE_TIME01_REG_CFG;
 127              		.loc 1 151 0
 128 0036 524B     		ldr	r3, .L14+36
 129 0038 524A     		ldr	r2, .L14+40
 130 003a 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_SAMPLE_TIME23_REG = ADC_SAR_Seq_0_DEFAULT_SAMPLE_TIME23_REG_CFG;
 131              		.loc 1 152 0
 132 003c 524B     		ldr	r3, .L14+44
 133 003e 514A     		ldr	r2, .L14+40
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 6


 134 0040 1A60     		str	r2, [r3]
 153:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #if(ADC_SAR_Seq_0_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_MUX_SWITCH0_REG |= ADC_SAR_Seq_0_DEFAULT_MUX_SWITCH0; 
 135              		.loc 1 155 0
 136 0042 524B     		ldr	r3, .L14+48
 137 0044 514A     		ldr	r2, .L14+48
 138 0046 1268     		ldr	r2, [r2]
 139 0048 8021     		mov	r1, #128
 140 004a 4902     		lsl	r1, r1, #9
 141 004c 0A43     		orr	r2, r1
 142 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             ADC_SAR_Seq_0_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_Seq_0_DEFAULT_MUX_SWITCH0; 
 159:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #endif /* ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #endif /*ADC_SAR_Seq_0_CHANNELS_MODE !=0 */    
 161:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 162:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_SATURATE_INTR_MASK_REG = 0u;
 143              		.loc 1 162 0
 144 0050 4F4B     		ldr	r3, .L14+52
 145 0052 0022     		mov	r2, #0
 146 0054 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_RANGE_INTR_MASK_REG = 0u;
 147              		.loc 1 163 0
 148 0056 4F4B     		ldr	r3, .L14+56
 149 0058 0022     		mov	r2, #0
 150 005a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_INTR_MASK_REG = ADC_SAR_Seq_0_SAR_INTR_MASK;
 151              		.loc 1 164 0
 152 005c 4E4B     		ldr	r3, .L14+60
 153 005e 0122     		mov	r2, #1
 154 0060 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_ANA_TRIM_REG = ADC_SAR_Seq_0_TRIM_COEF;
 155              		.loc 1 165 0
 156 0062 4E4B     		ldr	r3, .L14+64
 157 0064 0222     		mov	r2, #2
 158 0066 1A60     		str	r2, [r3]
 166:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     
 167:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /* Read and modify default configuration based on characterization */
 168:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     tmpRegVal = ADC_SAR_Seq_0_SAR_DFT_CTRL_REG;
 159              		.loc 1 168 0
 160 0068 4D4B     		ldr	r3, .L14+68
 161 006a 1B68     		ldr	r3, [r3]
 162 006c 7B60     		str	r3, [r7, #4]
 169:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #if(ADC_SAR_Seq_0_NOMINAL_CLOCK_FREQ > (ADC_SAR_Seq_0_MAX_FREQUENCY / 2))
 170:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         tmpRegVal &= (uint32)~ADC_SAR_Seq_0_DCEN;
 171:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         tmpRegVal |= ADC_SAR_Seq_0_SEL_CSEL_DFT_CHAR;
 172:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #else  /* clock speed < 9 Mhz */  
 173:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         tmpRegVal |= ADC_SAR_Seq_0_DLY_INC;
 163              		.loc 1 173 0
 164 006e 7B68     		ldr	r3, [r7, #4]
 165 0070 0122     		mov	r2, #1
 166 0072 1343     		orr	r3, r2
 167 0074 7B60     		str	r3, [r7, #4]
 174:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #endif /* clock speed > 9 Mhz */
 175:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_DFT_CTRL_REG = tmpRegVal;
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 7


 168              		.loc 1 175 0
 169 0076 4A4B     		ldr	r3, .L14+68
 170 0078 7A68     		ldr	r2, [r7, #4]
 171 007a 1A60     		str	r2, [r3]
 176:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     
 177:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #if(ADC_SAR_Seq_0_MAX_RESOLUTION != ADC_SAR_Seq_0_RESOLUTION_12)
 178:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_WOUNDING_REG = ADC_SAR_Seq_0_ALT_WOUNDING;
 179:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #endif /* ADC_SAR_Seq_0_MAX_RESOLUTION != ADC_SAR_Seq_0_RESOLUTION_12 */
 180:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM; chNum++)
 172              		.loc 1 181 0
 173 007c 0023     		mov	r3, #0
 174 007e FB60     		str	r3, [r7, #12]
 175 0080 66E0     		b	.L6
 176              	.L13:
 182:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     {
 183:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         tmpRegVal = (ADC_SAR_Seq_0_channelsConfig[chNum] & ADC_SAR_Seq_0_CHANNEL_CONFIG_MASK);
 177              		.loc 1 183 0
 178 0082 484B     		ldr	r3, .L14+72
 179 0084 FA68     		ldr	r2, [r7, #12]
 180 0086 9200     		lsl	r2, r2, #2
 181 0088 D258     		ldr	r2, [r2, r3]
 182 008a DC23     		mov	r3, #220
 183 008c 9B01     		lsl	r3, r3, #6
 184 008e 1340     		and	r3, r2
 185 0090 7B60     		str	r3, [r7, #4]
 184:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #if(ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 1u)
 185:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             tmpRegVal |= ADC_SAR_Seq_0_InputsPlacement[chNum];
 186:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #endif /* End ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM > 1u */
 187:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* When the part is wounded to 10-bit then the SUB_RESOLUTION bit 
 188:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit 
 189:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         *  (0) and 8-bit (1) resolution.
 190:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         */
 191:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #if((ADC_SAR_Seq_0_MAX_RESOLUTION != ADC_SAR_Seq_0_RESOLUTION_12) && \
 192:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             (ADC_SAR_Seq_0_ALT_WOUNDING == ADC_SAR_Seq_0_WOUNDING_10BIT))
 193:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             tmpRegVal &= (uint32)(~ADC_SAR_Seq_0_ALT_RESOLUTION_ON);
 194:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #endif /* ADC_SAR_Seq_0_MAX_RESOLUTION != ADC_SAR_Seq_0_RESOLUTION_12 */
 195:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 196:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #if(ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED)
 197:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         if(chNum < ADC_SAR_Seq_0_SEQUENCED_CHANNELS_NUM)
 198:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #endif /* ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED */
 199:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         {
 200:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_Seq_0_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRe
 186              		.loc 1 200 0
 187 0092 FB68     		ldr	r3, [r7, #12]
 188 0094 9B00     		lsl	r3, r3, #2
 189 0096 444A     		ldr	r2, .L14+76
 190 0098 9B18     		add	r3, r3, r2
 191 009a 7A68     		ldr	r2, [r7, #4]
 192 009c 1A60     		str	r2, [r3]
 201:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 202:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             if((ADC_SAR_Seq_0_channelsConfig[chNum] & ADC_SAR_Seq_0_IS_SATURATE_EN_MASK) != 0u)
 193              		.loc 1 202 0
 194 009e 414B     		ldr	r3, .L14+72
 195 00a0 FA68     		ldr	r2, [r7, #12]
 196 00a2 9200     		lsl	r2, r2, #2
 197 00a4 D258     		ldr	r2, [r2, r3]
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 8


 198 00a6 0123     		mov	r3, #1
 199 00a8 1340     		and	r3, r2
 200 00aa 0AD0     		beq	.L7
 203:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             {
 204:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ADC_SAR_Seq_0_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 201              		.loc 1 204 0
 202 00ac 384B     		ldr	r3, .L14+52
 203 00ae 384A     		ldr	r2, .L14+52
 204 00b0 1168     		ldr	r1, [r2]
 205 00b2 FA68     		ldr	r2, [r7, #12]
 206 00b4 0120     		mov	r0, #1
 207 00b6 041C     		mov	r4, r0
 208 00b8 9440     		lsl	r4, r4, r2
 209 00ba 221C     		mov	r2, r4
 210 00bc 92B2     		uxth	r2, r2
 211 00be 0A43     		orr	r2, r1
 212 00c0 1A60     		str	r2, [r3]
 213              	.L7:
 205:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             }
 206:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 207:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             if((ADC_SAR_Seq_0_channelsConfig[chNum] & ADC_SAR_Seq_0_IS_RANGE_CTRL_EN_MASK) != 0u)
 214              		.loc 1 207 0
 215 00c2 384B     		ldr	r3, .L14+72
 216 00c4 FA68     		ldr	r2, [r7, #12]
 217 00c6 9200     		lsl	r2, r2, #2
 218 00c8 D258     		ldr	r2, [r2, r3]
 219 00ca 0223     		mov	r3, #2
 220 00cc 1340     		and	r3, r2
 221 00ce 0AD0     		beq	.L8
 208:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             {
 209:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ADC_SAR_Seq_0_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 222              		.loc 1 209 0
 223 00d0 304B     		ldr	r3, .L14+56
 224 00d2 304A     		ldr	r2, .L14+56
 225 00d4 1168     		ldr	r1, [r2]
 226 00d6 FA68     		ldr	r2, [r7, #12]
 227 00d8 0120     		mov	r0, #1
 228 00da 041C     		mov	r4, r0
 229 00dc 9440     		lsl	r4, r4, r2
 230 00de 221C     		mov	r2, r4
 231 00e0 92B2     		uxth	r2, r2
 232 00e2 0A43     		orr	r2, r1
 233 00e4 1A60     		str	r2, [r3]
 234              	.L8:
 210:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             }
 211:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         }
 212:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #if(ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED)
 213:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             else
 214:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             {
 215:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 CY_SET_REG32(ADC_SAR_Seq_0_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_Seq_0_INJ_T
 216:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 217:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 if((ADC_SAR_Seq_0_channelsConfig[chNum] & ADC_SAR_Seq_0_IS_SATURATE_EN_MASK) != 0u)
 218:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 {
 219:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                     ADC_SAR_Seq_0_SAR_INTR_MASK_REG |= ADC_SAR_Seq_0_INJ_SATURATE_MASK;
 220:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 }
 221:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 222:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 if((ADC_SAR_Seq_0_channelsConfig[chNum] & ADC_SAR_Seq_0_IS_RANGE_CTRL_EN_MASK) != 0
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 9


 223:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 {
 224:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                     ADC_SAR_Seq_0_SAR_INTR_MASK_REG |= ADC_SAR_Seq_0_INJ_RANGE_MASK;
 225:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 }
 226:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             }
 227:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #endif /* ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED */
 228:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 229:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         if((ADC_SAR_Seq_0_channelsConfig[chNum] & ADC_SAR_Seq_0_ALT_RESOLUTION_ON) != 0u)
 235              		.loc 1 229 0
 236 00e6 2F4B     		ldr	r3, .L14+72
 237 00e8 FA68     		ldr	r2, [r7, #12]
 238 00ea 9200     		lsl	r2, r2, #2
 239 00ec D258     		ldr	r2, [r2, r3]
 240 00ee 8023     		mov	r3, #128
 241 00f0 9B00     		lsl	r3, r3, #2
 242 00f2 1340     		and	r3, r2
 243 00f4 03D0     		beq	.L9
 230:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         {
 231:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                counts = (int32)ADC_SAR_Seq_0_DEFAULT_MAX_WRK_ALT;
 244              		.loc 1 231 0
 245 00f6 8023     		mov	r3, #128
 246 00f8 5B00     		lsl	r3, r3, #1
 247 00fa BB60     		str	r3, [r7, #8]
 248 00fc 02E0     		b	.L10
 249              	.L9:
 232:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         }
 233:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         else
 234:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         {
 235:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                counts = (int32)ADC_SAR_Seq_0_SAR_WRK_MAX_12BIT;
 250              		.loc 1 235 0
 251 00fe 8023     		mov	r3, #128
 252 0100 5B01     		lsl	r3, r3, #5
 253 0102 BB60     		str	r3, [r7, #8]
 254              	.L10:
 236:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         }
 237:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 238:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         if((ADC_SAR_Seq_0_channelsConfig[chNum] & ADC_SAR_Seq_0_DIFFERENTIAL_EN) == 0u)
 255              		.loc 1 238 0
 256 0104 274B     		ldr	r3, .L14+72
 257 0106 FA68     		ldr	r2, [r7, #12]
 258 0108 9200     		lsl	r2, r2, #2
 259 010a D258     		ldr	r2, [r2, r3]
 260 010c 8023     		mov	r3, #128
 261 010e 5B00     		lsl	r3, r3, #1
 262 0110 1340     		and	r3, r2
 263 0112 05D1     		bne	.L11
 239:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         {  
 240:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #if((ADC_SAR_Seq_0_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_0__FSIGNED) && \
 241:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 (ADC_SAR_Seq_0_DEFAULT_NEG_INPUT_SEL == ADC_SAR_Seq_0__VREF))
 242:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 243:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ADC_SAR_Seq_0_offset[chNum] = (int16)(counts / -2);
 244:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #else    
 245:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ADC_SAR_Seq_0_offset[chNum] = 0;
 264              		.loc 1 245 0
 265 0114 254B     		ldr	r3, .L14+80
 266 0116 FA68     		ldr	r2, [r7, #12]
 267 0118 5200     		lsl	r2, r2, #1
 268 011a 0021     		mov	r1, #0
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 10


 269 011c D152     		strh	r1, [r2, r3]
 270 011e 04E0     		b	.L12
 271              	.L11:
 246:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR_Seq_0__FSIGNED */    
 247:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         }
 248:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         else    /* Differential channel */
 249:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         {
 250:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #if(ADC_SAR_Seq_0_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_0__FUNSIGNED)
 251:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 /* Set offset to the half scale to convert results to signed format */
 252:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ADC_SAR_Seq_0_offset[chNum] = (int16)(counts / 2);
 253:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #else    
 254:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ADC_SAR_Seq_0_offset[chNum] = 0;
 272              		.loc 1 254 0
 273 0120 224B     		ldr	r3, .L14+80
 274 0122 FA68     		ldr	r2, [r7, #12]
 275 0124 5200     		lsl	r2, r2, #1
 276 0126 0021     		mov	r1, #0
 277 0128 D152     		strh	r1, [r2, r3]
 278              	.L12:
 255:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             #endif /* end ADC_SAR_Seq_0_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR_Seq_0__FUNSIGNED 
 256:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         }
 257:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Calculate gain in counts per 10 volts with rounding */
 258:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_0_10MV_COUNTS) + 
 279              		.loc 1 258 0
 280 012a BB68     		ldr	r3, [r7, #8]
 281 012c 204A     		ldr	r2, .L14+84
 282 012e 5343     		mul	r3, r2
 283 0130 204A     		ldr	r2, .L14+88
 284 0132 9B18     		add	r3, r3, r2
 259:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                             ADC_SAR_Seq_0_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_Seq_0_DEFAULT_VREF_MV_V
 285              		.loc 1 259 0
 286 0134 181C     		mov	r0, r3
 287 0136 2049     		ldr	r1, .L14+92
 288 0138 FFF7FEFF 		bl	__aeabi_idiv
 289 013c 031C     		mov	r3, r0
 258:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_Seq_0_10MV_COUNTS) + 
 290              		.loc 1 258 0
 291 013e 9BB2     		uxth	r3, r3
 292 0140 19B2     		sxth	r1, r3
 293 0142 1E4B     		ldr	r3, .L14+96
 294 0144 FA68     		ldr	r2, [r7, #12]
 295 0146 9200     		lsl	r2, r2, #2
 296 0148 D150     		str	r1, [r2, r3]
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM; chNum++)
 297              		.loc 1 181 0
 298 014a FB68     		ldr	r3, [r7, #12]
 299 014c 0133     		add	r3, r3, #1
 300 014e FB60     		str	r3, [r7, #12]
 301              	.L6:
 181:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     for(chNum = 0u; chNum < ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM; chNum++)
 302              		.loc 1 181 0 is_stmt 0 discriminator 1
 303 0150 FB68     		ldr	r3, [r7, #12]
 304 0152 002B     		cmp	r3, #0
 305 0154 95D0     		beq	.L13
 260:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     }
 261:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 306              		.loc 1 261 0 is_stmt 1
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 11


 307 0156 BD46     		mov	sp, r7
 308 0158 05B0     		add	sp, sp, #20
 309              		@ sp needed for prologue
 310 015a 90BD     		pop	{r4, r7, pc}
 311              	.L15:
 312              		.align	2
 313              	.L14:
 314 015c 00000000 		.word	ADC_SAR_Seq_0_ISR
 315 0160 20001A40 		.word	1075445792
 316 0164 00001A40 		.word	1075445760
 317 0168 70020051 		.word	1358955120
 318 016c 04001A40 		.word	1075445764
 319 0170 8C000080 		.word	-2147483508
 320 0174 18001A40 		.word	1075445784
 321 0178 0000FF07 		.word	134152192
 322 017c 1C001A40 		.word	1075445788
 323 0180 10001A40 		.word	1075445776
 324 0184 04000400 		.word	262148
 325 0188 14001A40 		.word	1075445780
 326 018c 00031A40 		.word	1075446528
 327 0190 28021A40 		.word	1075446312
 328 0194 38021A40 		.word	1075446328
 329 0198 18021A40 		.word	1075446296
 330 019c 000F1A40 		.word	1075449600
 331 01a0 30001A40 		.word	1075445808
 332 01a4 00000000 		.word	ADC_SAR_Seq_0_channelsConfig
 333 01a8 80001A40 		.word	1075445888
 334 01ac 00000000 		.word	ADC_SAR_Seq_0_offset
 335 01b0 10270000 		.word	10000
 336 01b4 E40C0000 		.word	3300
 337 01b8 C8190000 		.word	6600
 338 01bc 00000000 		.word	ADC_SAR_Seq_0_countsPer10Volt
 339              		.cfi_endproc
 340              	.LFE1:
 341              		.size	ADC_SAR_Seq_0_Init, .-ADC_SAR_Seq_0_Init
 342              		.section	.text.ADC_SAR_Seq_0_Enable,"ax",%progbits
 343              		.align	2
 344              		.global	ADC_SAR_Seq_0_Enable
 345              		.code	16
 346              		.thumb_func
 347              		.type	ADC_SAR_Seq_0_Enable, %function
 348              	ADC_SAR_Seq_0_Enable:
 349              	.LFB2:
 262:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 263:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 264:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_1_Enable
 265:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 266:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 267:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 268:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Enables the clock and analog power for SAR ADC.
 269:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 270:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 271:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 272:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 273:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 274:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 275:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 12


 276:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 277:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_Enable(void)
 278:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 350              		.loc 1 278 0
 351              		.cfi_startproc
 352 0000 80B5     		push	{r7, lr}
 353              	.LCFI5:
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 7, -8
 356              		.cfi_offset 14, -4
 357 0002 00AF     		add	r7, sp, #0
 358              	.LCFI6:
 359              		.cfi_def_cfa_register 7
 279:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_CTRL_REG |= ADC_SAR_Seq_0_ENABLE;
 360              		.loc 1 279 0
 361 0004 054B     		ldr	r3, .L17
 362 0006 054A     		ldr	r2, .L17
 363 0008 1268     		ldr	r2, [r2]
 364 000a 8021     		mov	r1, #128
 365 000c 0906     		lsl	r1, r1, #24
 366 000e 0A43     		orr	r2, r1
 367 0010 1A60     		str	r2, [r3]
 280:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /* The block is ready to use 10 us after the enable signal is set high. */
 281:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     CyDelayUs(ADC_SAR_Seq_0_10US_DELAY);
 368              		.loc 1 281 0
 369 0012 0A20     		mov	r0, #10
 370 0014 FFF7FEFF 		bl	CyDelayUs
 282:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 371              		.loc 1 282 0
 372 0018 BD46     		mov	sp, r7
 373              		@ sp needed for prologue
 374 001a 80BD     		pop	{r7, pc}
 375              	.L18:
 376              		.align	2
 377              	.L17:
 378 001c 00001A40 		.word	1075445760
 379              		.cfi_endproc
 380              	.LFE2:
 381              		.size	ADC_SAR_Seq_0_Enable, .-ADC_SAR_Seq_0_Enable
 382              		.section	.text.ADC_SAR_Seq_0_Stop,"ax",%progbits
 383              		.align	2
 384              		.global	ADC_SAR_Seq_0_Stop
 385              		.code	16
 386              		.thumb_func
 387              		.type	ADC_SAR_Seq_0_Stop, %function
 388              	ADC_SAR_Seq_0_Stop:
 389              	.LFB3:
 283:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 284:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 285:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 286:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_Stop
 287:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 288:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 289:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 290:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 291:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  mode.
 292:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 13


 293:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 294:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 295:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 296:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 297:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 298:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 299:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 300:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_Stop(void)
 301:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 390              		.loc 1 301 0
 391              		.cfi_startproc
 392 0000 80B5     		push	{r7, lr}
 393              	.LCFI7:
 394              		.cfi_def_cfa_offset 8
 395              		.cfi_offset 7, -8
 396              		.cfi_offset 14, -4
 397 0002 00AF     		add	r7, sp, #0
 398              	.LCFI8:
 399              		.cfi_def_cfa_register 7
 302:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_CTRL_REG &= (uint32)~ADC_SAR_Seq_0_ENABLE;
 400              		.loc 1 302 0
 401 0004 034B     		ldr	r3, .L20
 402 0006 034A     		ldr	r2, .L20
 403 0008 1268     		ldr	r2, [r2]
 404 000a 5200     		lsl	r2, r2, #1
 405 000c 5208     		lsr	r2, r2, #1
 406 000e 1A60     		str	r2, [r3]
 303:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 407              		.loc 1 303 0
 408 0010 BD46     		mov	sp, r7
 409              		@ sp needed for prologue
 410 0012 80BD     		pop	{r7, pc}
 411              	.L21:
 412              		.align	2
 413              	.L20:
 414 0014 00001A40 		.word	1075445760
 415              		.cfi_endproc
 416              	.LFE3:
 417              		.size	ADC_SAR_Seq_0_Stop, .-ADC_SAR_Seq_0_Stop
 418              		.section	.text.ADC_SAR_Seq_0_StartConvert,"ax",%progbits
 419              		.align	2
 420              		.global	ADC_SAR_Seq_0_StartConvert
 421              		.code	16
 422              		.thumb_func
 423              		.type	ADC_SAR_Seq_0_StartConvert, %function
 424              	ADC_SAR_Seq_0_StartConvert:
 425              	.LFB4:
 304:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 305:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 306:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 307:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_StartConvert
 308:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 309:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 310:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 311:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Description:
 312:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  For free running mode, this API starts the conversion process and it
 313:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  runs continuously.
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 14


 314:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 315:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  In a triggered mode, this routine triggers every conversion by
 316:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 317:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  every conversion has to start by this API.
 318:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 319:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 320:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 321:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 322:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 323:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 324:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 325:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 326:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_StartConvert(void)
 327:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 426              		.loc 1 327 0
 427              		.cfi_startproc
 428 0000 80B5     		push	{r7, lr}
 429              	.LCFI9:
 430              		.cfi_def_cfa_offset 8
 431              		.cfi_offset 7, -8
 432              		.cfi_offset 14, -4
 433 0002 00AF     		add	r7, sp, #0
 434              	.LCFI10:
 435              		.cfi_def_cfa_register 7
 328:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #if(ADC_SAR_Seq_0_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_0__FREERUNNING)
 329:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_SAR_SAMPLE_CTRL_REG |= ADC_SAR_Seq_0_CONTINUOUS_EN;
 436              		.loc 1 329 0
 437 0004 044B     		ldr	r3, .L23
 438 0006 044A     		ldr	r2, .L23
 439 0008 1268     		ldr	r2, [r2]
 440 000a 8021     		mov	r1, #128
 441 000c 4902     		lsl	r1, r1, #9
 442 000e 0A43     		orr	r2, r1
 443 0010 1A60     		str	r2, [r3]
 330:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #else /* Firmware trigger */
 331:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_SAR_START_CTRL_REG = ADC_SAR_Seq_0_FW_TRIGGER;
 332:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #endif /* End ADC_SAR_Seq_0_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_0__FREERUNNING */
 333:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 334:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 444              		.loc 1 334 0
 445 0012 BD46     		mov	sp, r7
 446              		@ sp needed for prologue
 447 0014 80BD     		pop	{r7, pc}
 448              	.L24:
 449 0016 C046     		.align	2
 450              	.L23:
 451 0018 04001A40 		.word	1075445764
 452              		.cfi_endproc
 453              	.LFE4:
 454              		.size	ADC_SAR_Seq_0_StartConvert, .-ADC_SAR_Seq_0_StartConvert
 455              		.section	.text.ADC_SAR_Seq_0_StopConvert,"ax",%progbits
 456              		.align	2
 457              		.global	ADC_SAR_Seq_0_StopConvert
 458              		.code	16
 459              		.thumb_func
 460              		.type	ADC_SAR_Seq_0_StopConvert, %function
 461              	ADC_SAR_Seq_0_StopConvert:
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 15


 462              	.LFB5:
 335:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 337:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 338:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_StopConvert
 339:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 340:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 341:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 342:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Forces the ADC to stop all conversions.
 343:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 344:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 345:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 346:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 347:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 348:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 349:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 350:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 351:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_StopConvert(void)
 352:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 463              		.loc 1 352 0
 464              		.cfi_startproc
 465 0000 80B5     		push	{r7, lr}
 466              	.LCFI11:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 7, -8
 469              		.cfi_offset 14, -4
 470 0002 00AF     		add	r7, sp, #0
 471              	.LCFI12:
 472              		.cfi_def_cfa_register 7
 353:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #if(ADC_SAR_Seq_0_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR_Seq_0__FREERUNNING)
 354:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_Seq_0_CONTINUOUS_EN);
 473              		.loc 1 354 0
 474 0004 034B     		ldr	r3, .L26
 475 0006 034A     		ldr	r2, .L26
 476 0008 1168     		ldr	r1, [r2]
 477 000a 034A     		ldr	r2, .L26+4
 478 000c 0A40     		and	r2, r1
 479 000e 1A60     		str	r2, [r3]
 355:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #endif /* ADC_SAR_Seq_0_DEFAULT_SAMPLE_MODE == ADC_SAR_Seq_0__FREERUNNING */
 356:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 480              		.loc 1 356 0
 481 0010 BD46     		mov	sp, r7
 482              		@ sp needed for prologue
 483 0012 80BD     		pop	{r7, pc}
 484              	.L27:
 485              		.align	2
 486              	.L26:
 487 0014 04001A40 		.word	1075445764
 488 0018 FFFFFEFF 		.word	-65537
 489              		.cfi_endproc
 490              	.LFE5:
 491              		.size	ADC_SAR_Seq_0_StopConvert, .-ADC_SAR_Seq_0_StopConvert
 492              		.section	.text.ADC_SAR_Seq_0_IsEndConversion,"ax",%progbits
 493              		.align	2
 494              		.global	ADC_SAR_Seq_0_IsEndConversion
 495              		.code	16
 496              		.thumb_func
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 16


 497              		.type	ADC_SAR_Seq_0_IsEndConversion, %function
 498              	ADC_SAR_Seq_0_IsEndConversion:
 499              	.LFB6:
 357:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 358:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 359:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 360:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_IsEndConversion
 361:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 362:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 363:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 364:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Description: Checks for ADC end of conversion for the case one
 365:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  channel and end of scan for the case of multiple channels. It acts
 366:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  as a software version of the EOC. This function provides the
 367:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  programmer with two options. In one mode this function
 368:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  immediately returns with the conversion status. In the other mode,
 369:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  the function does not return (blocking) until the conversion has
 370:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  completed.
 371:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 372:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 373:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 374:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 375:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 376:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *                              for injection channel
 377:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 378:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *                              channel conversion
 379:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 381:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 382:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 383:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 384:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 385:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** uint32 ADC_SAR_Seq_0_IsEndConversion(uint32 retMode)
 386:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 500              		.loc 1 386 0
 501              		.cfi_startproc
 502 0000 80B5     		push	{r7, lr}
 503              	.LCFI13:
 504              		.cfi_def_cfa_offset 8
 505              		.cfi_offset 7, -8
 506              		.cfi_offset 14, -4
 507 0002 84B0     		sub	sp, sp, #16
 508              	.LCFI14:
 509              		.cfi_def_cfa_offset 24
 510 0004 00AF     		add	r7, sp, #0
 511              	.LCFI15:
 512              		.cfi_def_cfa_register 7
 513 0006 7860     		str	r0, [r7, #4]
 387:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     uint32 status = 0u;
 514              		.loc 1 387 0
 515 0008 0023     		mov	r3, #0
 516 000a FB60     		str	r3, [r7, #12]
 388:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 389:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     if((retMode & (ADC_SAR_Seq_0_RETURN_STATUS | ADC_SAR_Seq_0_WAIT_FOR_RESULT)) != 0u)
 517              		.loc 1 389 0
 518 000c 7A68     		ldr	r2, [r7, #4]
 519 000e 0323     		mov	r3, #3
 520 0010 1340     		and	r3, r2
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 17


 521 0012 11D0     		beq	.L29
 522              	.L31:
 390:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     {
 391:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         do
 392:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         {
 393:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             status = ADC_SAR_Seq_0_SAR_INTR_REG & ADC_SAR_Seq_0_EOS_MASK;
 523              		.loc 1 393 0 discriminator 1
 524 0014 0B4B     		ldr	r3, .L33
 525 0016 1A68     		ldr	r2, [r3]
 526 0018 0123     		mov	r3, #1
 527 001a 1340     		and	r3, r2
 528 001c FB60     		str	r3, [r7, #12]
 394:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         }while((status == 0u) && ((retMode & ADC_SAR_Seq_0_WAIT_FOR_RESULT) != 0u));
 529              		.loc 1 394 0 discriminator 1
 530 001e FB68     		ldr	r3, [r7, #12]
 531 0020 002B     		cmp	r3, #0
 532 0022 03D1     		bne	.L30
 533 0024 7A68     		ldr	r2, [r7, #4]
 534 0026 0223     		mov	r3, #2
 535 0028 1340     		and	r3, r2
 536 002a F3D1     		bne	.L31
 537              	.L30:
 395:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 396:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         if(status != 0u)
 538              		.loc 1 396 0
 539 002c FB68     		ldr	r3, [r7, #12]
 540 002e 002B     		cmp	r3, #0
 541 0030 02D0     		beq	.L29
 397:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         {
 398:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             /* Clear EOS bit */
 399:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             ADC_SAR_Seq_0_SAR_INTR_REG = ADC_SAR_Seq_0_EOS_MASK;
 542              		.loc 1 399 0
 543 0032 044B     		ldr	r3, .L33
 544 0034 0122     		mov	r2, #1
 545 0036 1A60     		str	r2, [r3]
 546              	.L29:
 400:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         }
 401:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     }
 402:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 403:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #if(ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED)
 404:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         if((retMode & (ADC_SAR_Seq_0_RETURN_STATUS_INJ | ADC_SAR_Seq_0_WAIT_FOR_RESULT_INJ)) != 0u)
 405:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         {
 406:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             do
 407:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             {
 408:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 status |= ADC_SAR_Seq_0_SAR_INTR_REG & ADC_SAR_Seq_0_INJ_EOC_MASK;
 409:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             }while(((status & ADC_SAR_Seq_0_INJ_EOC_MASK) != 0u) &&
 410:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                    ((retMode & ADC_SAR_Seq_0_WAIT_FOR_RESULT_INJ) != 0u));
 411:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 412:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             if((status & ADC_SAR_Seq_0_INJ_EOC_MASK) != 0u)
 413:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             {
 414:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 /* Clear Injection EOS bit */
 415:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ADC_SAR_Seq_0_SAR_INTR_REG = ADC_SAR_Seq_0_INJ_EOC_MASK;
 416:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             }
 417:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         }
 418:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     #endif /* ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED */
 419:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 420:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     return (status);
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 18


 547              		.loc 1 420 0
 548 0038 FB68     		ldr	r3, [r7, #12]
 421:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 549              		.loc 1 421 0
 550 003a 181C     		mov	r0, r3
 551 003c BD46     		mov	sp, r7
 552 003e 04B0     		add	sp, sp, #16
 553              		@ sp needed for prologue
 554 0040 80BD     		pop	{r7, pc}
 555              	.L34:
 556 0042 C046     		.align	2
 557              	.L33:
 558 0044 10021A40 		.word	1075446288
 559              		.cfi_endproc
 560              	.LFE6:
 561              		.size	ADC_SAR_Seq_0_IsEndConversion, .-ADC_SAR_Seq_0_IsEndConversion
 562              		.section	.text.ADC_SAR_Seq_0_GetResult16,"ax",%progbits
 563              		.align	2
 564              		.global	ADC_SAR_Seq_0_GetResult16
 565              		.code	16
 566              		.thumb_func
 567              		.type	ADC_SAR_Seq_0_GetResult16, %function
 568              	ADC_SAR_Seq_0_GetResult16:
 569              	.LFB7:
 422:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 423:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 424:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 425:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_GetResult16
 426:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 427:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 428:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 429:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Gets the data available in the SAR DATA register.
 430:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 431:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 432:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  chan: The ADC channel in which to return the result. The first channel
 433:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 434:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 435:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 436:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Returns converted data as a signed 16-bit integer
 437:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 438:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 439:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** int16 ADC_SAR_Seq_0_GetResult16(uint32 chan)
 440:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 570              		.loc 1 440 0
 571              		.cfi_startproc
 572 0000 80B5     		push	{r7, lr}
 573              	.LCFI16:
 574              		.cfi_def_cfa_offset 8
 575              		.cfi_offset 7, -8
 576              		.cfi_offset 14, -4
 577 0002 84B0     		sub	sp, sp, #16
 578              	.LCFI17:
 579              		.cfi_def_cfa_offset 24
 580 0004 00AF     		add	r7, sp, #0
 581              	.LCFI18:
 582              		.cfi_def_cfa_register 7
 583 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 19


 441:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     uint32 result;
 442:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 443:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 444:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     CYASSERT(chan < ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM);
 584              		.loc 1 444 0
 585 0008 7B68     		ldr	r3, [r7, #4]
 586 000a 002B     		cmp	r3, #0
 587 000c 02D0     		beq	.L36
 588              		.loc 1 444 0 is_stmt 0 discriminator 1
 589 000e 0020     		mov	r0, #0
 590 0010 FFF7FEFF 		bl	CyHalt
 591              	.L36:
 445:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 446:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     if(chan < ADC_SAR_Seq_0_SEQUENCED_CHANNELS_NUM)
 592              		.loc 1 446 0 is_stmt 1
 593 0014 7B68     		ldr	r3, [r7, #4]
 594 0016 002B     		cmp	r3, #0
 595 0018 08D1     		bne	.L37
 447:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     {
 448:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_Seq_0_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) 
 596              		.loc 1 448 0
 597 001a 7B68     		ldr	r3, [r7, #4]
 598 001c 9B00     		lsl	r3, r3, #2
 599 001e 084A     		ldr	r2, .L40
 600 0020 9B18     		add	r3, r3, r2
 601 0022 1B68     		ldr	r3, [r3]
 602 0024 1B04     		lsl	r3, r3, #16
 603 0026 1B0C     		lsr	r3, r3, #16
 604 0028 FB60     		str	r3, [r7, #12]
 605 002a 01E0     		b	.L38
 606              	.L37:
 449:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 ADC_SAR_Seq_0_RESULT_MASK;
 450:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     }
 451:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     else
 452:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     {
 453:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #if(ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED)
 454:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             result = ADC_SAR_Seq_0_SAR_INJ_RESULT_REG & ADC_SAR_Seq_0_RESULT_MASK;
 455:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #else
 456:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             result = 0u;
 607              		.loc 1 456 0
 608 002c 0023     		mov	r3, #0
 609 002e FB60     		str	r3, [r7, #12]
 610              	.L38:
 457:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #endif /* ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED */
 458:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     }
 459:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 460:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     return ( (int16)result );
 611              		.loc 1 460 0
 612 0030 FB68     		ldr	r3, [r7, #12]
 613 0032 9BB2     		uxth	r3, r3
 614 0034 1BB2     		sxth	r3, r3
 461:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 615              		.loc 1 461 0
 616 0036 181C     		mov	r0, r3
 617 0038 BD46     		mov	sp, r7
 618 003a 04B0     		add	sp, sp, #16
 619              		@ sp needed for prologue
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 20


 620 003c 80BD     		pop	{r7, pc}
 621              	.L41:
 622 003e C046     		.align	2
 623              	.L40:
 624 0040 80011A40 		.word	1075446144
 625              		.cfi_endproc
 626              	.LFE7:
 627              		.size	ADC_SAR_Seq_0_GetResult16, .-ADC_SAR_Seq_0_GetResult16
 628              		.section	.text.ADC_SAR_Seq_0_SetChanMask,"ax",%progbits
 629              		.align	2
 630              		.global	ADC_SAR_Seq_0_SetChanMask
 631              		.code	16
 632              		.thumb_func
 633              		.type	ADC_SAR_Seq_0_SetChanMask, %function
 634              	ADC_SAR_Seq_0_SetChanMask:
 635              	.LFB8:
 462:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 463:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 464:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 465:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_SetChanMask
 466:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 467:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 468:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 469:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Sets the channel enable mask.
 470:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 471:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 472:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  mask: Sets which channels that will be
 473:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  scanned. Setting bits for channels that do not exist will have no
 474:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  effect. For example, if only 6 channels were enabled, setting a
 475:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 476:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  This API will not enable the injection channel.
 477:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Examples: If the component is setup to sequence through 8
 478:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 479:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 480:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 481:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 482:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 483:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 484:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_SetChanMask(uint32 mask)
 485:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 636              		.loc 1 485 0
 637              		.cfi_startproc
 638 0000 80B5     		push	{r7, lr}
 639              	.LCFI19:
 640              		.cfi_def_cfa_offset 8
 641              		.cfi_offset 7, -8
 642              		.cfi_offset 14, -4
 643 0002 82B0     		sub	sp, sp, #8
 644              	.LCFI20:
 645              		.cfi_def_cfa_offset 16
 646 0004 00AF     		add	r7, sp, #0
 647              	.LCFI21:
 648              		.cfi_def_cfa_register 7
 649 0006 7860     		str	r0, [r7, #4]
 486:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_CHAN_EN_REG = mask & ADC_SAR_Seq_0_MAX_CHANNELS_EN_MASK;
 650              		.loc 1 486 0
 651 0008 034B     		ldr	r3, .L43
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 21


 652 000a 7968     		ldr	r1, [r7, #4]
 653 000c 0122     		mov	r2, #1
 654 000e 0A40     		and	r2, r1
 655 0010 1A60     		str	r2, [r3]
 487:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 656              		.loc 1 487 0
 657 0012 BD46     		mov	sp, r7
 658 0014 02B0     		add	sp, sp, #8
 659              		@ sp needed for prologue
 660 0016 80BD     		pop	{r7, pc}
 661              	.L44:
 662              		.align	2
 663              	.L43:
 664 0018 20001A40 		.word	1075445792
 665              		.cfi_endproc
 666              	.LFE8:
 667              		.size	ADC_SAR_Seq_0_SetChanMask, .-ADC_SAR_Seq_0_SetChanMask
 668              		.section	.text.ADC_SAR_Seq_0_SetLowLimit,"ax",%progbits
 669              		.align	2
 670              		.global	ADC_SAR_Seq_0_SetLowLimit
 671              		.code	16
 672              		.thumb_func
 673              		.type	ADC_SAR_Seq_0_SetLowLimit, %function
 674              	ADC_SAR_Seq_0_SetLowLimit:
 675              	.LFB9:
 488:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 489:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** #if(ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED)
 490:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 491:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 492:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /*******************************************************************************
 493:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Function Name: ADC_SAR_Seq_0_EnableInjection
 494:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ********************************************************************************
 495:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 496:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Summary:
 497:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  Enables the injection channel for the next scan only.
 498:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 499:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Parameters:
 500:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  None.
 501:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 502:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Return:
 503:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  None.
 504:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 505:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *******************************************************************************/
 506:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     void ADC_SAR_Seq_0_EnableInjection(void)
 507:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     {
 508:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         ADC_SAR_Seq_0_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_Seq_0_INJ_CHAN_EN;
 509:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     }
 510:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 511:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** #endif /* ADC_SAR_Seq_0_INJ_CHANNEL_ENABLED */
 512:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 513:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 514:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 515:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_SetLowLimit
 516:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 517:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 518:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 519:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Sets the low limit parameter for a limit condition.
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 22


 520:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 521:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 522:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  lowLimit: The low limit for a limit condition.
 523:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 524:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 525:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 526:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 527:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 528:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_SetLowLimit(uint32 lowLimit)
 529:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 676              		.loc 1 529 0
 677              		.cfi_startproc
 678 0000 80B5     		push	{r7, lr}
 679              	.LCFI22:
 680              		.cfi_def_cfa_offset 8
 681              		.cfi_offset 7, -8
 682              		.cfi_offset 14, -4
 683 0002 82B0     		sub	sp, sp, #8
 684              	.LCFI23:
 685              		.cfi_def_cfa_offset 16
 686 0004 00AF     		add	r7, sp, #0
 687              	.LCFI24:
 688              		.cfi_def_cfa_register 7
 689 0006 7860     		str	r0, [r7, #4]
 530:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_0_RANGE_LOW_MASK);
 690              		.loc 1 530 0
 691 0008 084B     		ldr	r3, .L46
 692 000a 084A     		ldr	r2, .L46
 693 000c 1268     		ldr	r2, [r2]
 694 000e 120C     		lsr	r2, r2, #16
 695 0010 1204     		lsl	r2, r2, #16
 696 0012 1A60     		str	r2, [r3]
 531:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_Seq_0_RANGE_LOW_MASK;
 697              		.loc 1 531 0
 698 0014 054B     		ldr	r3, .L46
 699 0016 054A     		ldr	r2, .L46
 700 0018 1168     		ldr	r1, [r2]
 701 001a 7A68     		ldr	r2, [r7, #4]
 702 001c 1204     		lsl	r2, r2, #16
 703 001e 120C     		lsr	r2, r2, #16
 704 0020 0A43     		orr	r2, r1
 705 0022 1A60     		str	r2, [r3]
 532:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 706              		.loc 1 532 0
 707 0024 BD46     		mov	sp, r7
 708 0026 02B0     		add	sp, sp, #8
 709              		@ sp needed for prologue
 710 0028 80BD     		pop	{r7, pc}
 711              	.L47:
 712 002a C046     		.align	2
 713              	.L46:
 714 002c 18001A40 		.word	1075445784
 715              		.cfi_endproc
 716              	.LFE9:
 717              		.size	ADC_SAR_Seq_0_SetLowLimit, .-ADC_SAR_Seq_0_SetLowLimit
 718              		.section	.text.ADC_SAR_Seq_0_SetHighLimit,"ax",%progbits
 719              		.align	2
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 23


 720              		.global	ADC_SAR_Seq_0_SetHighLimit
 721              		.code	16
 722              		.thumb_func
 723              		.type	ADC_SAR_Seq_0_SetHighLimit, %function
 724              	ADC_SAR_Seq_0_SetHighLimit:
 725              	.LFB10:
 533:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 534:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 535:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 536:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_SetHighLimit
 537:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 538:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 539:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 540:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Sets the low limit parameter for a limit condition.
 541:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 542:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 543:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  highLimit: The high limit for a limit condition.
 544:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 545:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 546:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 547:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 549:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_SetHighLimit(uint32 highLimit)
 550:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 726              		.loc 1 550 0
 727              		.cfi_startproc
 728 0000 80B5     		push	{r7, lr}
 729              	.LCFI25:
 730              		.cfi_def_cfa_offset 8
 731              		.cfi_offset 7, -8
 732              		.cfi_offset 14, -4
 733 0002 82B0     		sub	sp, sp, #8
 734              	.LCFI26:
 735              		.cfi_def_cfa_offset 16
 736 0004 00AF     		add	r7, sp, #0
 737              	.LCFI27:
 738              		.cfi_def_cfa_register 7
 739 0006 7860     		str	r0, [r7, #4]
 551:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_Seq_0_RANGE_HIGH_MASK);
 740              		.loc 1 551 0
 741 0008 074B     		ldr	r3, .L49
 742 000a 074A     		ldr	r2, .L49
 743 000c 1268     		ldr	r2, [r2]
 744 000e 1204     		lsl	r2, r2, #16
 745 0010 120C     		lsr	r2, r2, #16
 746 0012 1A60     		str	r2, [r3]
 552:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_Seq_0_RANGE_HIGH_OFFSET);
 747              		.loc 1 552 0
 748 0014 044B     		ldr	r3, .L49
 749 0016 044A     		ldr	r2, .L49
 750 0018 1168     		ldr	r1, [r2]
 751 001a 7A68     		ldr	r2, [r7, #4]
 752 001c 1204     		lsl	r2, r2, #16
 753 001e 0A43     		orr	r2, r1
 754 0020 1A60     		str	r2, [r3]
 553:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 755              		.loc 1 553 0
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 24


 756 0022 BD46     		mov	sp, r7
 757 0024 02B0     		add	sp, sp, #8
 758              		@ sp needed for prologue
 759 0026 80BD     		pop	{r7, pc}
 760              	.L50:
 761              		.align	2
 762              	.L49:
 763 0028 18001A40 		.word	1075445784
 764              		.cfi_endproc
 765              	.LFE10:
 766              		.size	ADC_SAR_Seq_0_SetHighLimit, .-ADC_SAR_Seq_0_SetHighLimit
 767              		.section	.text.ADC_SAR_Seq_0_SetLimitMask,"ax",%progbits
 768              		.align	2
 769              		.global	ADC_SAR_Seq_0_SetLimitMask
 770              		.code	16
 771              		.thumb_func
 772              		.type	ADC_SAR_Seq_0_SetLimitMask, %function
 773              	ADC_SAR_Seq_0_SetLimitMask:
 774              	.LFB11:
 554:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 555:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 556:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 557:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_SetLimitMask
 558:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 559:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 560:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 561:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Sets the channel limit condition mask.
 562:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 563:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 564:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  mask: Sets which channels that may cause a
 565:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 566:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  will have no effect. For example, if only 6 channels were enabled,
 567:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 568:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 569:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 570:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 571:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 572:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 573:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_SetLimitMask(uint32 mask)
 574:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 775              		.loc 1 574 0
 776              		.cfi_startproc
 777 0000 80B5     		push	{r7, lr}
 778              	.LCFI28:
 779              		.cfi_def_cfa_offset 8
 780              		.cfi_offset 7, -8
 781              		.cfi_offset 14, -4
 782 0002 82B0     		sub	sp, sp, #8
 783              	.LCFI29:
 784              		.cfi_def_cfa_offset 16
 785 0004 00AF     		add	r7, sp, #0
 786              	.LCFI30:
 787              		.cfi_def_cfa_register 7
 788 0006 7860     		str	r0, [r7, #4]
 575:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_Seq_0_MAX_CHANNELS_EN_MASK;
 789              		.loc 1 575 0
 790 0008 034B     		ldr	r3, .L52
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 25


 791 000a 7968     		ldr	r1, [r7, #4]
 792 000c 0122     		mov	r2, #1
 793 000e 0A40     		and	r2, r1
 794 0010 1A60     		str	r2, [r3]
 576:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 795              		.loc 1 576 0
 796 0012 BD46     		mov	sp, r7
 797 0014 02B0     		add	sp, sp, #8
 798              		@ sp needed for prologue
 799 0016 80BD     		pop	{r7, pc}
 800              	.L53:
 801              		.align	2
 802              	.L52:
 803 0018 38021A40 		.word	1075446328
 804              		.cfi_endproc
 805              	.LFE11:
 806              		.size	ADC_SAR_Seq_0_SetLimitMask, .-ADC_SAR_Seq_0_SetLimitMask
 807              		.section	.text.ADC_SAR_Seq_0_SetSatMask,"ax",%progbits
 808              		.align	2
 809              		.global	ADC_SAR_Seq_0_SetSatMask
 810              		.code	16
 811              		.thumb_func
 812              		.type	ADC_SAR_Seq_0_SetSatMask, %function
 813              	ADC_SAR_Seq_0_SetSatMask:
 814              	.LFB12:
 577:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 578:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 579:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 580:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_SetSatMask
 581:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 582:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 583:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 584:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Sets the channel saturation event mask.
 585:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 586:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 587:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  mask: Sets which channels that may cause a
 588:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 589:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  will have no effect. For example, if only 8 channels were enabled,
 590:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 591:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 592:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 593:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 594:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 595:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 596:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_SetSatMask(uint32 mask)
 597:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 815              		.loc 1 597 0
 816              		.cfi_startproc
 817 0000 80B5     		push	{r7, lr}
 818              	.LCFI31:
 819              		.cfi_def_cfa_offset 8
 820              		.cfi_offset 7, -8
 821              		.cfi_offset 14, -4
 822 0002 82B0     		sub	sp, sp, #8
 823              	.LCFI32:
 824              		.cfi_def_cfa_offset 16
 825 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 26


 826              	.LCFI33:
 827              		.cfi_def_cfa_register 7
 828 0006 7860     		str	r0, [r7, #4]
 598:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_Seq_0_MAX_CHANNELS_EN_MASK;
 829              		.loc 1 598 0
 830 0008 034B     		ldr	r3, .L55
 831 000a 7968     		ldr	r1, [r7, #4]
 832 000c 0122     		mov	r2, #1
 833 000e 0A40     		and	r2, r1
 834 0010 1A60     		str	r2, [r3]
 599:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 835              		.loc 1 599 0
 836 0012 BD46     		mov	sp, r7
 837 0014 02B0     		add	sp, sp, #8
 838              		@ sp needed for prologue
 839 0016 80BD     		pop	{r7, pc}
 840              	.L56:
 841              		.align	2
 842              	.L55:
 843 0018 28021A40 		.word	1075446312
 844              		.cfi_endproc
 845              	.LFE12:
 846              		.size	ADC_SAR_Seq_0_SetSatMask, .-ADC_SAR_Seq_0_SetSatMask
 847              		.section	.text.ADC_SAR_Seq_0_SetOffset,"ax",%progbits
 848              		.align	2
 849              		.global	ADC_SAR_Seq_0_SetOffset
 850              		.code	16
 851              		.thumb_func
 852              		.type	ADC_SAR_Seq_0_SetOffset, %function
 853              	ADC_SAR_Seq_0_SetOffset:
 854              	.LFB13:
 600:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 601:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 602:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 603:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_SetOffset
 604:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 605:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 606:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 607:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *   Description: Sets the ADC offset which is used by the functions
 608:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 609:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *   to substract the offset from the given reading
 610:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *   before calculating the voltage conversion.
 611:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 612:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 613:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  chan: ADC channel number.
 614:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  offset: This value is a measured value when the
 615:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *          inputs are shorted or connected to the same input voltage.
 616:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 617:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 618:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 619:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 620:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Global variables:
 621:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_SAR_Seq_0_Offset:  Modified to set the user provided offset.
 622:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 623:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 624:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_SetOffset(uint32 chan, int16 offset)
 625:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 27


 855              		.loc 1 625 0
 856              		.cfi_startproc
 857 0000 80B5     		push	{r7, lr}
 858              	.LCFI34:
 859              		.cfi_def_cfa_offset 8
 860              		.cfi_offset 7, -8
 861              		.cfi_offset 14, -4
 862 0002 82B0     		sub	sp, sp, #8
 863              	.LCFI35:
 864              		.cfi_def_cfa_offset 16
 865 0004 00AF     		add	r7, sp, #0
 866              	.LCFI36:
 867              		.cfi_def_cfa_register 7
 868 0006 7860     		str	r0, [r7, #4]
 869 0008 0A1C     		mov	r2, r1
 870 000a BB1C     		add	r3, r7, #2
 871 000c 1A80     		strh	r2, [r3]
 626:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 627:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     CYASSERT(chan < ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM);
 872              		.loc 1 627 0
 873 000e 7B68     		ldr	r3, [r7, #4]
 874 0010 002B     		cmp	r3, #0
 875 0012 02D0     		beq	.L58
 876              		.loc 1 627 0 is_stmt 0 discriminator 1
 877 0014 0020     		mov	r0, #0
 878 0016 FFF7FEFF 		bl	CyHalt
 879              	.L58:
 628:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 629:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_offset[chan] = offset;
 880              		.loc 1 629 0 is_stmt 1
 881 001a 044B     		ldr	r3, .L59
 882 001c 7A68     		ldr	r2, [r7, #4]
 883 001e 5200     		lsl	r2, r2, #1
 884 0020 B91C     		add	r1, r7, #2
 885 0022 0988     		ldrh	r1, [r1]
 886 0024 D152     		strh	r1, [r2, r3]
 630:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 887              		.loc 1 630 0
 888 0026 BD46     		mov	sp, r7
 889 0028 02B0     		add	sp, sp, #8
 890              		@ sp needed for prologue
 891 002a 80BD     		pop	{r7, pc}
 892              	.L60:
 893              		.align	2
 894              	.L59:
 895 002c 00000000 		.word	ADC_SAR_Seq_0_offset
 896              		.cfi_endproc
 897              	.LFE13:
 898              		.size	ADC_SAR_Seq_0_SetOffset, .-ADC_SAR_Seq_0_SetOffset
 899              		.section	.text.ADC_SAR_Seq_0_SetGain,"ax",%progbits
 900              		.align	2
 901              		.global	ADC_SAR_Seq_0_SetGain
 902              		.code	16
 903              		.thumb_func
 904              		.type	ADC_SAR_Seq_0_SetGain, %function
 905              	ADC_SAR_Seq_0_SetGain:
 906              	.LFB14:
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 28


 631:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 632:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 633:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** /*******************************************************************************
 634:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Function Name: ADC_SAR_Seq_0_SetGain
 635:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** ********************************************************************************
 636:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 637:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Summary:
 638:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 639:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  conversion functions below. This value is set by default by the
 640:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  reference and input range settings. It should only be used to further
 641:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  calibrate the ADC with a known input or if an external reference is
 642:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 643:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 644:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  conversion between ADC counts and voltage.
 645:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 646:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Parameters:
 647:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  chan: ADC channel number.
 648:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  adcGain: ADC gain in counts per 10 volts.
 649:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 650:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Return:
 651:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  None.
 652:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 653:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** * Global variables:
 654:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *  ADC_SAR_Seq_0_CountsPer10Volt:  modified to set the ADC gain in counts 
 655:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *   per 10 volt.
 656:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *
 657:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** *******************************************************************************/
 658:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** void ADC_SAR_Seq_0_SetGain(uint32 chan, int32 adcGain)
 659:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** {
 907              		.loc 1 659 0
 908              		.cfi_startproc
 909 0000 80B5     		push	{r7, lr}
 910              	.LCFI37:
 911              		.cfi_def_cfa_offset 8
 912              		.cfi_offset 7, -8
 913              		.cfi_offset 14, -4
 914 0002 82B0     		sub	sp, sp, #8
 915              	.LCFI38:
 916              		.cfi_def_cfa_offset 16
 917 0004 00AF     		add	r7, sp, #0
 918              	.LCFI39:
 919              		.cfi_def_cfa_register 7
 920 0006 7860     		str	r0, [r7, #4]
 921 0008 3960     		str	r1, [r7]
 660:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 661:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     CYASSERT(chan < ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM);
 922              		.loc 1 661 0
 923 000a 7B68     		ldr	r3, [r7, #4]
 924 000c 002B     		cmp	r3, #0
 925 000e 02D0     		beq	.L62
 926              		.loc 1 661 0 is_stmt 0 discriminator 1
 927 0010 0020     		mov	r0, #0
 928 0012 FFF7FEFF 		bl	CyHalt
 929              	.L62:
 662:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 663:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ADC_SAR_Seq_0_countsPer10Volt[chan] = adcGain;
 930              		.loc 1 663 0 is_stmt 1
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 29


 931 0016 044B     		ldr	r3, .L63
 932 0018 7A68     		ldr	r2, [r7, #4]
 933 001a 9200     		lsl	r2, r2, #2
 934 001c 3968     		ldr	r1, [r7]
 935 001e D150     		str	r1, [r2, r3]
 664:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** }
 936              		.loc 1 664 0
 937 0020 BD46     		mov	sp, r7
 938 0022 02B0     		add	sp, sp, #8
 939              		@ sp needed for prologue
 940 0024 80BD     		pop	{r7, pc}
 941              	.L64:
 942 0026 C046     		.align	2
 943              	.L63:
 944 0028 00000000 		.word	ADC_SAR_Seq_0_countsPer10Volt
 945              		.cfi_endproc
 946              	.LFE14:
 947              		.size	ADC_SAR_Seq_0_SetGain, .-ADC_SAR_Seq_0_SetGain
 948              		.section	.text.ADC_SAR_Seq_0_CountsTo_mVolts,"ax",%progbits
 949              		.align	2
 950              		.global	ADC_SAR_Seq_0_CountsTo_mVolts
 951              		.code	16
 952              		.thumb_func
 953              		.type	ADC_SAR_Seq_0_CountsTo_mVolts, %function
 954              	ADC_SAR_Seq_0_CountsTo_mVolts:
 955              	.LFB15:
 665:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 666:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 667:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** #if(ADC_SAR_Seq_0_DEFAULT_JUSTIFICATION_SEL == ADC_SAR_Seq_0__RIGHT)
 668:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 669:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 670:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /*******************************************************************************
 671:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Function Name: ADC_SAR_Seq_0_CountsTo_mVolts
 672:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ********************************************************************************
 673:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 674:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Summary:
 675:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  This function converts ADC counts to mVolts
 676:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  This function is not available when left data format justification selected.
 677:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 678:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Parameters:
 679:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  chan: The ADC channel number.
 680:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  adcCounts: Result from the ADC conversion
 681:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 682:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Return:
 683:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  Results in mVolts
 684:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 685:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Global variables:
 686:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  ADC_SAR_Seq_0_countsPer10Volt:  used to convert ADC counts to mVolts.
 687:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  ADC_SAR_Seq_0_Offset:  Used as the offset while converting ADC counts 
 688:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *   to mVolts.
 689:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 690:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *******************************************************************************/
 691:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     int16 ADC_SAR_Seq_0_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 692:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     {
 956              		.loc 1 692 0
 957              		.cfi_startproc
 958 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 30


 959              	.LCFI40:
 960              		.cfi_def_cfa_offset 8
 961              		.cfi_offset 7, -8
 962              		.cfi_offset 14, -4
 963 0002 84B0     		sub	sp, sp, #16
 964              	.LCFI41:
 965              		.cfi_def_cfa_offset 24
 966 0004 00AF     		add	r7, sp, #0
 967              	.LCFI42:
 968              		.cfi_def_cfa_register 7
 969 0006 7860     		str	r0, [r7, #4]
 970 0008 0A1C     		mov	r2, r1
 971 000a BB1C     		add	r3, r7, #2
 972 000c 1A80     		strh	r2, [r3]
 693:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         int16 mVolts;
 694:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 695:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 696:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         CYASSERT(chan < ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM);
 973              		.loc 1 696 0
 974 000e 7B68     		ldr	r3, [r7, #4]
 975 0010 002B     		cmp	r3, #0
 976 0012 02D0     		beq	.L66
 977              		.loc 1 696 0 is_stmt 0 discriminator 1
 978 0014 0020     		mov	r0, #0
 979 0016 FFF7FEFF 		bl	CyHalt
 980              	.L66:
 697:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 698:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 699:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #if(ADC_SAR_Seq_0_DEFAULT_AVG_MODE == ADC_SAR_Seq_0__ACCUMULATE)
 700:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             if((ADC_SAR_Seq_0_channelsConfig[chan] & ADC_SAR_Seq_0_AVERAGING_EN) != 0u)
 701:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             {
 702:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 adcCounts /= ADC_SAR_Seq_0_DEFAULT_AVG_SAMPLES_DIV;
 703:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             }    
 704:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #endif /* ADC_SAR_Seq_0_DEFAULT_AVG_MODE == ADC_SAR_Seq_0__ACCUMULATE */
 705:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 706:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Subtract ADC offset */
 707:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         adcCounts -= ADC_SAR_Seq_0_offset[chan];
 981              		.loc 1 707 0 is_stmt 1
 982 001a BB1C     		add	r3, r7, #2
 983 001c 1A88     		ldrh	r2, [r3]
 984 001e 1E4B     		ldr	r3, .L72
 985 0020 7968     		ldr	r1, [r7, #4]
 986 0022 4900     		lsl	r1, r1, #1
 987 0024 CB5A     		ldrh	r3, [r1, r3]
 988 0026 9BB2     		uxth	r3, r3
 989 0028 9BB2     		uxth	r3, r3
 990 002a D31A     		sub	r3, r2, r3
 991 002c 9AB2     		uxth	r2, r3
 992 002e BB1C     		add	r3, r7, #2
 993 0030 1A80     		strh	r2, [r3]
 708:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_0_10MV_COUNTS) + ( (adcCounts > 0) ? 
 994              		.loc 1 709 0
 995 0032 BB1C     		add	r3, r7, #2
 996 0034 0021     		mov	r1, #0
 997 0036 5B5E     		ldrsh	r3, [r3, r1]
 998 0038 184A     		ldr	r2, .L72+4
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 31


 999 003a 5A43     		mul	r2, r3
 710:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                  (ADC_SAR_Seq_0_countsPer10Volt[chan] / 2) : (-(ADC_SAR_Seq_0_countsPer10Volt[chan]
 1000              		.loc 1 710 0
 1001 003c BB1C     		add	r3, r7, #2
 1002 003e 0021     		mov	r1, #0
 1003 0040 5B5E     		ldrsh	r3, [r3, r1]
 1004 0042 002B     		cmp	r3, #0
 1005 0044 08DD     		ble	.L67
 1006              		.loc 1 710 0 is_stmt 0 discriminator 1
 1007 0046 164B     		ldr	r3, .L72+8
 1008 0048 7968     		ldr	r1, [r7, #4]
 1009 004a 8900     		lsl	r1, r1, #2
 1010 004c CB58     		ldr	r3, [r1, r3]
 1011 004e 002B     		cmp	r3, #0
 1012 0050 00DA     		bge	.L68
 1013 0052 0133     		add	r3, r3, #1
 1014              	.L68:
 1015 0054 5B10     		asr	r3, r3, #1
 1016 0056 08E0     		b	.L69
 1017              	.L67:
 1018              		.loc 1 710 0 discriminator 2
 1019 0058 114B     		ldr	r3, .L72+8
 1020 005a 7968     		ldr	r1, [r7, #4]
 1021 005c 8900     		lsl	r1, r1, #2
 1022 005e CB58     		ldr	r3, [r1, r3]
 1023 0060 002B     		cmp	r3, #0
 1024 0062 00DA     		bge	.L70
 1025 0064 0133     		add	r3, r3, #1
 1026              	.L70:
 1027 0066 5B10     		asr	r3, r3, #1
 1028 0068 5B42     		neg	r3, r3
 1029              	.L69:
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_0_10MV_COUNTS) + ( (adcCounts > 0) ? 
 1030              		.loc 1 709 0 is_stmt 1
 1031 006a D218     		add	r2, r2, r3
 711:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                  / ADC_SAR_Seq_0_countsPer10Volt[chan]);
 1032              		.loc 1 711 0
 1033 006c 0C4B     		ldr	r3, .L72+8
 1034 006e 7968     		ldr	r1, [r7, #4]
 1035 0070 8900     		lsl	r1, r1, #2
 1036 0072 CB58     		ldr	r3, [r1, r3]
 1037 0074 101C     		mov	r0, r2
 1038 0076 191C     		mov	r1, r3
 1039 0078 FFF7FEFF 		bl	__aeabi_idiv
 1040 007c 031C     		mov	r3, r0
 1041 007e 1A1C     		mov	r2, r3
 709:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_Seq_0_10MV_COUNTS) + ( (adcCounts > 0) ? 
 1042              		.loc 1 709 0
 1043 0080 3B1C     		mov	r3, r7
 1044 0082 0E33     		add	r3, r3, #14
 1045 0084 1A80     		strh	r2, [r3]
 712:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 713:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         return( mVolts );
 1046              		.loc 1 713 0
 1047 0086 3B1C     		mov	r3, r7
 1048 0088 0E33     		add	r3, r3, #14
 1049 008a 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 32


 1050 008c 1BB2     		sxth	r3, r3
 714:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     }
 1051              		.loc 1 714 0
 1052 008e 181C     		mov	r0, r3
 1053 0090 BD46     		mov	sp, r7
 1054 0092 04B0     		add	sp, sp, #16
 1055              		@ sp needed for prologue
 1056 0094 80BD     		pop	{r7, pc}
 1057              	.L73:
 1058 0096 C046     		.align	2
 1059              	.L72:
 1060 0098 00000000 		.word	ADC_SAR_Seq_0_offset
 1061 009c 10270000 		.word	10000
 1062 00a0 00000000 		.word	ADC_SAR_Seq_0_countsPer10Volt
 1063              		.cfi_endproc
 1064              	.LFE15:
 1065              		.size	ADC_SAR_Seq_0_CountsTo_mVolts, .-ADC_SAR_Seq_0_CountsTo_mVolts
 1066              		.global	__aeabi_lmul
 1067              		.global	__aeabi_ldivmod
 1068              		.section	.text.ADC_SAR_Seq_0_CountsTo_uVolts,"ax",%progbits
 1069              		.align	2
 1070              		.global	ADC_SAR_Seq_0_CountsTo_uVolts
 1071              		.code	16
 1072              		.thumb_func
 1073              		.type	ADC_SAR_Seq_0_CountsTo_uVolts, %function
 1074              	ADC_SAR_Seq_0_CountsTo_uVolts:
 1075              	.LFB16:
 715:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 716:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 717:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /*******************************************************************************
 718:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Function Name: ADC_SAR_Seq_0_CountsTo_uVolts
 719:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ********************************************************************************
 720:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 721:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Summary:
 722:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  This function converts ADC counts to micro Volts
 723:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  This function is not available when left data format justification selected.
 724:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 725:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Parameters:
 726:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  chan: The ADC channel number.
 727:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  adcCounts: Result from the ADC conversion
 728:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 729:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Return:
 730:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  Results in uVolts
 731:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 732:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Global variables:
 733:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  ADC_SAR_Seq_0_countsPer10Volt:  used to convert ADC counts to uVolts.
 734:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  ADC_SAR_Seq_0_Offset:  Used as the offset while converting ADC counts 
 735:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *   to mVolts.
 736:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 737:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Theory: 
 738:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 739:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  number in the conversion to uVolts and at the same time not loose 
 740:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  resolution.
 741:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 742:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  on 10 million and later divide on gain in counts per 10V. 
 743:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 744:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *******************************************************************************/
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 33


 745:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     int32 ADC_SAR_Seq_0_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 746:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     {
 1076              		.loc 1 746 0
 1077              		.cfi_startproc
 1078 0000 B0B5     		push	{r4, r5, r7, lr}
 1079              	.LCFI43:
 1080              		.cfi_def_cfa_offset 16
 1081              		.cfi_offset 4, -16
 1082              		.cfi_offset 5, -12
 1083              		.cfi_offset 7, -8
 1084              		.cfi_offset 14, -4
 1085 0002 86B0     		sub	sp, sp, #24
 1086              	.LCFI44:
 1087              		.cfi_def_cfa_offset 40
 1088 0004 00AF     		add	r7, sp, #0
 1089              	.LCFI45:
 1090              		.cfi_def_cfa_register 7
 1091 0006 F860     		str	r0, [r7, #12]
 1092 0008 0A1C     		mov	r2, r1
 1093 000a 3B1C     		mov	r3, r7
 1094 000c 0A33     		add	r3, r3, #10
 1095 000e 1A80     		strh	r2, [r3]
 747:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         int64 uVolts;
 748:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 749:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 750:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         CYASSERT(chan < ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM);
 1096              		.loc 1 750 0
 1097 0010 FB68     		ldr	r3, [r7, #12]
 1098 0012 002B     		cmp	r3, #0
 1099 0014 02D0     		beq	.L75
 1100              		.loc 1 750 0 is_stmt 0 discriminator 1
 1101 0016 0020     		mov	r0, #0
 1102 0018 FFF7FEFF 		bl	CyHalt
 1103              	.L75:
 751:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 752:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 753:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #if(ADC_SAR_Seq_0_DEFAULT_AVG_MODE == ADC_SAR_Seq_0__ACCUMULATE)
 754:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             if((ADC_SAR_Seq_0_channelsConfig[chan] & ADC_SAR_Seq_0_AVERAGING_EN) != 0u)
 755:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             {
 756:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 adcCounts /= ADC_SAR_Seq_0_DEFAULT_AVG_SAMPLES_DIV;
 757:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             }    
 758:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #endif /* ADC_SAR_Seq_0_DEFAULT_AVG_MODE == ADC_SAR_Seq_0__ACCUMULATE */
 759:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 760:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Subtract ADC offset */
 761:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         adcCounts -= ADC_SAR_Seq_0_offset[chan];
 1104              		.loc 1 761 0 is_stmt 1
 1105 001c 3B1C     		mov	r3, r7
 1106 001e 0A33     		add	r3, r3, #10
 1107 0020 1A88     		ldrh	r2, [r3]
 1108 0022 1B4B     		ldr	r3, .L77+8
 1109 0024 F968     		ldr	r1, [r7, #12]
 1110 0026 4900     		lsl	r1, r1, #1
 1111 0028 CB5A     		ldrh	r3, [r1, r3]
 1112 002a 9BB2     		uxth	r3, r3
 1113 002c 9BB2     		uxth	r3, r3
 1114 002e D31A     		sub	r3, r2, r3
 1115 0030 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 34


 1116 0032 3B1C     		mov	r3, r7
 1117 0034 0A33     		add	r3, r3, #10
 1118 0036 1A80     		strh	r2, [r3]
 762:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 763:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         uVolts = ((int64)adcCounts * ADC_SAR_Seq_0_10UV_COUNTS) / ADC_SAR_Seq_0_countsPer10Volt[cha
 1119              		.loc 1 763 0
 1120 0038 3B1C     		mov	r3, r7
 1121 003a 0A33     		add	r3, r3, #10
 1122 003c 0022     		mov	r2, #0
 1123 003e 9B5E     		ldrsh	r3, [r3, r2]
 1124 0040 1A1C     		mov	r2, r3
 1125 0042 3A60     		str	r2, [r7]
 1126 0044 DB17     		asr	r3, r3, #31
 1127 0046 7B60     		str	r3, [r7, #4]
 1128 0048 3868     		ldr	r0, [r7]
 1129 004a 7968     		ldr	r1, [r7, #4]
 1130 004c 0F4B     		ldr	r3, .L77+4
 1131 004e 0E4A     		ldr	r2, .L77
 1132 0050 FFF7FEFF 		bl	__aeabi_lmul
 1133 0054 021C     		mov	r2, r0
 1134 0056 0B1C     		mov	r3, r1
 1135 0058 0E49     		ldr	r1, .L77+12
 1136 005a F868     		ldr	r0, [r7, #12]
 1137 005c 8000     		lsl	r0, r0, #2
 1138 005e 4158     		ldr	r1, [r0, r1]
 1139 0060 0C1C     		mov	r4, r1
 1140 0062 C917     		asr	r1, r1, #31
 1141 0064 0D1C     		mov	r5, r1
 1142 0066 101C     		mov	r0, r2
 1143 0068 191C     		mov	r1, r3
 1144 006a 221C     		mov	r2, r4
 1145 006c 2B1C     		mov	r3, r5
 1146 006e FFF7FEFF 		bl	__aeabi_ldivmod
 1147 0072 031C     		mov	r3, r0
 1148 0074 0C1C     		mov	r4, r1
 1149 0076 3B61     		str	r3, [r7, #16]
 1150 0078 7C61     		str	r4, [r7, #20]
 764:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 765:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         return( (int32)uVolts );
 1151              		.loc 1 765 0
 1152 007a 3B69     		ldr	r3, [r7, #16]
 766:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     }
 1153              		.loc 1 766 0
 1154 007c 181C     		mov	r0, r3
 1155 007e BD46     		mov	sp, r7
 1156 0080 06B0     		add	sp, sp, #24
 1157              		@ sp needed for prologue
 1158 0082 B0BD     		pop	{r4, r5, r7, pc}
 1159              	.L78:
 1160 0084 C046C046 		.align	3
 1161              	.L77:
 1162 0088 80969800 		.word	10000000
 1163 008c 00000000 		.word	0
 1164 0090 00000000 		.word	ADC_SAR_Seq_0_offset
 1165 0094 00000000 		.word	ADC_SAR_Seq_0_countsPer10Volt
 1166              		.cfi_endproc
 1167              	.LFE16:
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 35


 1168              		.size	ADC_SAR_Seq_0_CountsTo_uVolts, .-ADC_SAR_Seq_0_CountsTo_uVolts
 1169              		.global	__aeabi_i2f
 1170              		.global	__aeabi_fmul
 1171              		.global	__aeabi_fdiv
 1172              		.section	.text.ADC_SAR_Seq_0_CountsTo_Volts,"ax",%progbits
 1173              		.align	2
 1174              		.global	ADC_SAR_Seq_0_CountsTo_Volts
 1175              		.code	16
 1176              		.thumb_func
 1177              		.type	ADC_SAR_Seq_0_CountsTo_Volts, %function
 1178              	ADC_SAR_Seq_0_CountsTo_Volts:
 1179              	.LFB17:
 767:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 768:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 769:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     /*******************************************************************************
 770:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Function Name: ADC_SAR_Seq_0_CountsTo_Volts
 771:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     ********************************************************************************
 772:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 773:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Summary:
 774:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  Converts the ADC output to Volts as a floating point number.
 775:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  This function is not available when left data format justification selected.
 776:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 777:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Parameters:
 778:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  chan: The ADC channel number.
 779:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  Result from the ADC conversion
 780:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 781:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Return:
 782:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  Results in Volts
 783:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 784:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     * Global variables:
 785:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  ADC_SAR_Seq_0_countsPer10Volt:  used to convert ADC counts to Volts.
 786:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *  ADC_SAR_Seq_0_Offset:  Used as the offset while converting ADC counts 
 787:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *   to mVolts.
 788:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *
 789:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     *******************************************************************************/
 790:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     float32 ADC_SAR_Seq_0_CountsTo_Volts(uint32 chan, int16 adcCounts)
 791:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     {
 1180              		.loc 1 791 0
 1181              		.cfi_startproc
 1182 0000 90B5     		push	{r4, r7, lr}
 1183              	.LCFI46:
 1184              		.cfi_def_cfa_offset 12
 1185              		.cfi_offset 4, -12
 1186              		.cfi_offset 7, -8
 1187              		.cfi_offset 14, -4
 1188 0002 85B0     		sub	sp, sp, #20
 1189              	.LCFI47:
 1190              		.cfi_def_cfa_offset 32
 1191 0004 00AF     		add	r7, sp, #0
 1192              	.LCFI48:
 1193              		.cfi_def_cfa_register 7
 1194 0006 7860     		str	r0, [r7, #4]
 1195 0008 0A1C     		mov	r2, r1
 1196 000a BB1C     		add	r3, r7, #2
 1197 000c 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         float32 volts;
 793:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 36


 794:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 795:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         CYASSERT(chan < ADC_SAR_Seq_0_TOTAL_CHANNELS_NUM);
 1198              		.loc 1 795 0
 1199 000e 7B68     		ldr	r3, [r7, #4]
 1200 0010 002B     		cmp	r3, #0
 1201 0012 02D0     		beq	.L80
 1202              		.loc 1 795 0 is_stmt 0 discriminator 1
 1203 0014 0020     		mov	r0, #0
 1204 0016 FFF7FEFF 		bl	CyHalt
 1205              	.L80:
 796:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 797:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 798:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #if(ADC_SAR_Seq_0_DEFAULT_AVG_MODE == ADC_SAR_Seq_0__ACCUMULATE)
 799:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             if((ADC_SAR_Seq_0_channelsConfig[chan] & ADC_SAR_Seq_0_AVERAGING_EN) != 0u)
 800:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             {
 801:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****                 adcCounts /= ADC_SAR_Seq_0_DEFAULT_AVG_SAMPLES_DIV;
 802:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****             }    
 803:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         #endif /* ADC_SAR_Seq_0_DEFAULT_AVG_MODE == ADC_SAR_Seq_0__ACCUMULATE */
 804:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 805:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         /* Subtract ADC offset */
 806:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         adcCounts -= ADC_SAR_Seq_0_offset[chan];
 1206              		.loc 1 806 0 is_stmt 1
 1207 001a BB1C     		add	r3, r7, #2
 1208 001c 1A88     		ldrh	r2, [r3]
 1209 001e 154B     		ldr	r3, .L82
 1210 0020 7968     		ldr	r1, [r7, #4]
 1211 0022 4900     		lsl	r1, r1, #1
 1212 0024 CB5A     		ldrh	r3, [r1, r3]
 1213 0026 9BB2     		uxth	r3, r3
 1214 0028 9BB2     		uxth	r3, r3
 1215 002a D31A     		sub	r3, r2, r3
 1216 002c 9AB2     		uxth	r2, r3
 1217 002e BB1C     		add	r3, r7, #2
 1218 0030 1A80     		strh	r2, [r3]
 807:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 808:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         volts = ((float32)adcCounts * ADC_SAR_Seq_0_10V_COUNTS) / (float32)ADC_SAR_Seq_0_countsPer1
 1219              		.loc 1 808 0
 1220 0032 BB1C     		add	r3, r7, #2
 1221 0034 0022     		mov	r2, #0
 1222 0036 9B5E     		ldrsh	r3, [r3, r2]
 1223 0038 181C     		mov	r0, r3
 1224 003a FFF7FEFF 		bl	__aeabi_i2f
 1225 003e 031C     		add	r3, r0, #0
 1226 0040 181C     		add	r0, r3, #0
 1227 0042 0D49     		ldr	r1, .L82+4
 1228 0044 FFF7FEFF 		bl	__aeabi_fmul
 1229 0048 031C     		add	r3, r0, #0
 1230 004a 1C1C     		add	r4, r3, #0
 1231 004c 0B4B     		ldr	r3, .L82+8
 1232 004e 7A68     		ldr	r2, [r7, #4]
 1233 0050 9200     		lsl	r2, r2, #2
 1234 0052 D358     		ldr	r3, [r2, r3]
 1235 0054 181C     		mov	r0, r3
 1236 0056 FFF7FEFF 		bl	__aeabi_i2f
 1237 005a 031C     		add	r3, r0, #0
 1238 005c 201C     		add	r0, r4, #0
 1239 005e 191C     		add	r1, r3, #0
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 37


 1240 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1241 0064 031C     		add	r3, r0, #0
 1242 0066 FB60     		str	r3, [r7, #12]
 809:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c **** 
 810:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****         return( volts );
 1243              		.loc 1 810 0
 1244 0068 FB68     		ldr	r3, [r7, #12]
 811:.\Generated_Source\PSoC4/ADC_SAR_Seq_0.c ****     }
 1245              		.loc 1 811 0
 1246 006a 181C     		add	r0, r3, #0
 1247 006c BD46     		mov	sp, r7
 1248 006e 05B0     		add	sp, sp, #20
 1249              		@ sp needed for prologue
 1250 0070 90BD     		pop	{r4, r7, pc}
 1251              	.L83:
 1252 0072 C046     		.align	2
 1253              	.L82:
 1254 0074 00000000 		.word	ADC_SAR_Seq_0_offset
 1255 0078 00002041 		.word	1092616192
 1256 007c 00000000 		.word	ADC_SAR_Seq_0_countsPer10Volt
 1257              		.cfi_endproc
 1258              	.LFE17:
 1259              		.size	ADC_SAR_Seq_0_CountsTo_Volts, .-ADC_SAR_Seq_0_CountsTo_Volts
 1260              		.text
 1261              	.Letext0:
 1262              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1263              		.section	.debug_info,"",%progbits
 1264              	.Ldebug_info0:
 1265 0000 D0040000 		.4byte	0x4d0
 1266 0004 0200     		.2byte	0x2
 1267 0006 00000000 		.4byte	.Ldebug_abbrev0
 1268 000a 04       		.byte	0x4
 1269 000b 01       		.uleb128 0x1
 1270 000c 64030000 		.4byte	.LASF59
 1271 0010 01       		.byte	0x1
 1272 0011 04010000 		.4byte	.LASF60
 1273 0015 54000000 		.4byte	.LASF61
 1274 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1275 001d 00000000 		.4byte	0
 1276 0021 00000000 		.4byte	0
 1277 0025 00000000 		.4byte	.Ldebug_line0
 1278 0029 02       		.uleb128 0x2
 1279 002a 01       		.byte	0x1
 1280 002b 06       		.byte	0x6
 1281 002c D1030000 		.4byte	.LASF0
 1282 0030 02       		.uleb128 0x2
 1283 0031 01       		.byte	0x1
 1284 0032 08       		.byte	0x8
 1285 0033 93010000 		.4byte	.LASF1
 1286 0037 02       		.uleb128 0x2
 1287 0038 02       		.byte	0x2
 1288 0039 05       		.byte	0x5
 1289 003a 3B030000 		.4byte	.LASF2
 1290 003e 02       		.uleb128 0x2
 1291 003f 02       		.byte	0x2
 1292 0040 07       		.byte	0x7
 1293 0041 BC000000 		.4byte	.LASF3
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 38


 1294 0045 02       		.uleb128 0x2
 1295 0046 04       		.byte	0x4
 1296 0047 05       		.byte	0x5
 1297 0048 AC000000 		.4byte	.LASF4
 1298 004c 02       		.uleb128 0x2
 1299 004d 04       		.byte	0x4
 1300 004e 07       		.byte	0x7
 1301 004f BC010000 		.4byte	.LASF5
 1302 0053 02       		.uleb128 0x2
 1303 0054 08       		.byte	0x8
 1304 0055 05       		.byte	0x5
 1305 0056 04030000 		.4byte	.LASF6
 1306 005a 02       		.uleb128 0x2
 1307 005b 08       		.byte	0x8
 1308 005c 07       		.byte	0x7
 1309 005d 7B020000 		.4byte	.LASF7
 1310 0061 03       		.uleb128 0x3
 1311 0062 04       		.byte	0x4
 1312 0063 05       		.byte	0x5
 1313 0064 696E7400 		.ascii	"int\000"
 1314 0068 02       		.uleb128 0x2
 1315 0069 04       		.byte	0x4
 1316 006a 07       		.byte	0x7
 1317 006b 67020000 		.4byte	.LASF8
 1318 006f 04       		.uleb128 0x4
 1319 0070 5E030000 		.4byte	.LASF9
 1320 0074 02       		.byte	0x2
 1321 0075 5B       		.byte	0x5b
 1322 0076 30000000 		.4byte	0x30
 1323 007a 04       		.uleb128 0x4
 1324 007b 3A020000 		.4byte	.LASF10
 1325 007f 02       		.byte	0x2
 1326 0080 5C       		.byte	0x5c
 1327 0081 3E000000 		.4byte	0x3e
 1328 0085 04       		.uleb128 0x4
 1329 0086 4B020000 		.4byte	.LASF11
 1330 008a 02       		.byte	0x2
 1331 008b 5D       		.byte	0x5d
 1332 008c 4C000000 		.4byte	0x4c
 1333 0090 04       		.uleb128 0x4
 1334 0091 CB030000 		.4byte	.LASF12
 1335 0095 02       		.byte	0x2
 1336 0096 5F       		.byte	0x5f
 1337 0097 37000000 		.4byte	0x37
 1338 009b 04       		.uleb128 0x4
 1339 009c CE010000 		.4byte	.LASF13
 1340 00a0 02       		.byte	0x2
 1341 00a1 60       		.byte	0x60
 1342 00a2 45000000 		.4byte	0x45
 1343 00a6 04       		.uleb128 0x4
 1344 00a7 49010000 		.4byte	.LASF14
 1345 00ab 02       		.byte	0x2
 1346 00ac 61       		.byte	0x61
 1347 00ad B1000000 		.4byte	0xb1
 1348 00b1 02       		.uleb128 0x2
 1349 00b2 04       		.byte	0x4
 1350 00b3 04       		.byte	0x4
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 39


 1351 00b4 69000000 		.4byte	.LASF15
 1352 00b8 02       		.uleb128 0x2
 1353 00b9 08       		.byte	0x8
 1354 00ba 04       		.byte	0x4
 1355 00bb 11020000 		.4byte	.LASF16
 1356 00bf 04       		.uleb128 0x4
 1357 00c0 F7030000 		.4byte	.LASF17
 1358 00c4 02       		.byte	0x2
 1359 00c5 66       		.byte	0x66
 1360 00c6 53000000 		.4byte	0x53
 1361 00ca 02       		.uleb128 0x2
 1362 00cb 01       		.byte	0x1
 1363 00cc 08       		.byte	0x8
 1364 00cd CF000000 		.4byte	.LASF18
 1365 00d1 04       		.uleb128 0x4
 1366 00d2 C5030000 		.4byte	.LASF19
 1367 00d6 02       		.byte	0x2
 1368 00d7 F2       		.byte	0xf2
 1369 00d8 DC000000 		.4byte	0xdc
 1370 00dc 05       		.uleb128 0x5
 1371 00dd 85000000 		.4byte	0x85
 1372 00e1 02       		.uleb128 0x2
 1373 00e2 04       		.byte	0x4
 1374 00e3 07       		.byte	0x7
 1375 00e4 FB020000 		.4byte	.LASF20
 1376 00e8 06       		.uleb128 0x6
 1377 00e9 01       		.byte	0x1
 1378 00ea A1010000 		.4byte	.LASF24
 1379 00ee 01       		.byte	0x1
 1380 00ef 40       		.byte	0x40
 1381 00f0 01       		.byte	0x1
 1382 00f1 00000000 		.4byte	.LFB0
 1383 00f5 24000000 		.4byte	.LFE0
 1384 00f9 00000000 		.4byte	.LLST0
 1385 00fd 01       		.byte	0x1
 1386 00fe 07       		.uleb128 0x7
 1387 00ff 01       		.byte	0x1
 1388 0100 F1000000 		.4byte	.LASF35
 1389 0104 01       		.byte	0x1
 1390 0105 5F       		.byte	0x5f
 1391 0106 01       		.byte	0x1
 1392 0107 00000000 		.4byte	.LFB1
 1393 010b C0010000 		.4byte	.LFE1
 1394 010f 2C000000 		.4byte	.LLST1
 1395 0113 01       		.byte	0x1
 1396 0114 43010000 		.4byte	0x143
 1397 0118 08       		.uleb128 0x8
 1398 0119 17030000 		.4byte	.LASF21
 1399 011d 01       		.byte	0x1
 1400 011e 61       		.byte	0x61
 1401 011f 85000000 		.4byte	0x85
 1402 0123 02       		.byte	0x2
 1403 0124 91       		.byte	0x91
 1404 0125 6C       		.sleb128 -20
 1405 0126 08       		.uleb128 0x8
 1406 0127 51010000 		.4byte	.LASF22
 1407 012b 01       		.byte	0x1
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 40


 1408 012c 62       		.byte	0x62
 1409 012d 85000000 		.4byte	0x85
 1410 0131 02       		.byte	0x2
 1411 0132 91       		.byte	0x91
 1412 0133 64       		.sleb128 -28
 1413 0134 08       		.uleb128 0x8
 1414 0135 74020000 		.4byte	.LASF23
 1415 0139 01       		.byte	0x1
 1416 013a 63       		.byte	0x63
 1417 013b 9B000000 		.4byte	0x9b
 1418 013f 02       		.byte	0x2
 1419 0140 91       		.byte	0x91
 1420 0141 68       		.sleb128 -24
 1421 0142 00       		.byte	0
 1422 0143 09       		.uleb128 0x9
 1423 0144 01       		.byte	0x1
 1424 0145 52020000 		.4byte	.LASF25
 1425 0149 01       		.byte	0x1
 1426 014a 1501     		.2byte	0x115
 1427 014c 01       		.byte	0x1
 1428 014d 00000000 		.4byte	.LFB2
 1429 0151 20000000 		.4byte	.LFE2
 1430 0155 64000000 		.4byte	.LLST2
 1431 0159 01       		.byte	0x1
 1432 015a 0A       		.uleb128 0xa
 1433 015b 01       		.byte	0x1
 1434 015c E4030000 		.4byte	.LASF26
 1435 0160 01       		.byte	0x1
 1436 0161 2C01     		.2byte	0x12c
 1437 0163 01       		.byte	0x1
 1438 0164 00000000 		.4byte	.LFB3
 1439 0168 18000000 		.4byte	.LFE3
 1440 016c 90000000 		.4byte	.LLST3
 1441 0170 01       		.byte	0x1
 1442 0171 0A       		.uleb128 0xa
 1443 0172 01       		.byte	0x1
 1444 0173 39000000 		.4byte	.LASF27
 1445 0177 01       		.byte	0x1
 1446 0178 4601     		.2byte	0x146
 1447 017a 01       		.byte	0x1
 1448 017b 00000000 		.4byte	.LFB4
 1449 017f 1C000000 		.4byte	.LFE4
 1450 0183 BC000000 		.4byte	.LLST4
 1451 0187 01       		.byte	0x1
 1452 0188 0A       		.uleb128 0xa
 1453 0189 01       		.byte	0x1
 1454 018a 5B010000 		.4byte	.LASF28
 1455 018e 01       		.byte	0x1
 1456 018f 5F01     		.2byte	0x15f
 1457 0191 01       		.byte	0x1
 1458 0192 00000000 		.4byte	.LFB5
 1459 0196 1C000000 		.4byte	.LFE5
 1460 019a E8000000 		.4byte	.LLST5
 1461 019e 01       		.byte	0x1
 1462 019f 0B       		.uleb128 0xb
 1463 01a0 01       		.byte	0x1
 1464 01a1 75010000 		.4byte	.LASF30
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 41


 1465 01a5 01       		.byte	0x1
 1466 01a6 8101     		.2byte	0x181
 1467 01a8 01       		.byte	0x1
 1468 01a9 85000000 		.4byte	0x85
 1469 01ad 00000000 		.4byte	.LFB6
 1470 01b1 48000000 		.4byte	.LFE6
 1471 01b5 14010000 		.4byte	.LLST6
 1472 01b9 01       		.byte	0x1
 1473 01ba DD010000 		.4byte	0x1dd
 1474 01be 0C       		.uleb128 0xc
 1475 01bf 33030000 		.4byte	.LASF32
 1476 01c3 01       		.byte	0x1
 1477 01c4 8101     		.2byte	0x181
 1478 01c6 85000000 		.4byte	0x85
 1479 01ca 02       		.byte	0x2
 1480 01cb 91       		.byte	0x91
 1481 01cc 6C       		.sleb128 -20
 1482 01cd 0D       		.uleb128 0xd
 1483 01ce 2D010000 		.4byte	.LASF29
 1484 01d2 01       		.byte	0x1
 1485 01d3 8301     		.2byte	0x183
 1486 01d5 85000000 		.4byte	0x85
 1487 01d9 02       		.byte	0x2
 1488 01da 91       		.byte	0x91
 1489 01db 74       		.sleb128 -12
 1490 01dc 00       		.byte	0
 1491 01dd 0E       		.uleb128 0xe
 1492 01de 01       		.byte	0x1
 1493 01df F7010000 		.4byte	.LASF31
 1494 01e3 01       		.byte	0x1
 1495 01e4 B701     		.2byte	0x1b7
 1496 01e6 01       		.byte	0x1
 1497 01e7 90000000 		.4byte	0x90
 1498 01eb 00000000 		.4byte	.LFB7
 1499 01ef 44000000 		.4byte	.LFE7
 1500 01f3 4C010000 		.4byte	.LLST7
 1501 01f7 01       		.byte	0x1
 1502 01f8 1B020000 		.4byte	0x21b
 1503 01fc 0C       		.uleb128 0xc
 1504 01fd EF020000 		.4byte	.LASF33
 1505 0201 01       		.byte	0x1
 1506 0202 B701     		.2byte	0x1b7
 1507 0204 85000000 		.4byte	0x85
 1508 0208 02       		.byte	0x2
 1509 0209 91       		.byte	0x91
 1510 020a 6C       		.sleb128 -20
 1511 020b 0D       		.uleb128 0xd
 1512 020c DD030000 		.4byte	.LASF34
 1513 0210 01       		.byte	0x1
 1514 0211 B901     		.2byte	0x1b9
 1515 0213 85000000 		.4byte	0x85
 1516 0217 02       		.byte	0x2
 1517 0218 91       		.byte	0x91
 1518 0219 74       		.sleb128 -12
 1519 021a 00       		.byte	0
 1520 021b 0F       		.uleb128 0xf
 1521 021c 01       		.byte	0x1
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 42


 1522 021d 18020000 		.4byte	.LASF36
 1523 0221 01       		.byte	0x1
 1524 0222 E401     		.2byte	0x1e4
 1525 0224 01       		.byte	0x1
 1526 0225 00000000 		.4byte	.LFB8
 1527 0229 1C000000 		.4byte	.LFE8
 1528 022d 84010000 		.4byte	.LLST8
 1529 0231 01       		.byte	0x1
 1530 0232 46020000 		.4byte	0x246
 1531 0236 0C       		.uleb128 0xc
 1532 0237 12030000 		.4byte	.LASF37
 1533 023b 01       		.byte	0x1
 1534 023c E401     		.2byte	0x1e4
 1535 023e 85000000 		.4byte	0x85
 1536 0242 02       		.byte	0x2
 1537 0243 91       		.byte	0x91
 1538 0244 74       		.sleb128 -12
 1539 0245 00       		.byte	0
 1540 0246 0F       		.uleb128 0xf
 1541 0247 01       		.byte	0x1
 1542 0248 D4010000 		.4byte	.LASF38
 1543 024c 01       		.byte	0x1
 1544 024d 1002     		.2byte	0x210
 1545 024f 01       		.byte	0x1
 1546 0250 00000000 		.4byte	.LFB9
 1547 0254 30000000 		.4byte	.LFE9
 1548 0258 BC010000 		.4byte	.LLST9
 1549 025c 01       		.byte	0x1
 1550 025d 71020000 		.4byte	0x271
 1551 0261 0C       		.uleb128 0xc
 1552 0262 EE010000 		.4byte	.LASF39
 1553 0266 01       		.byte	0x1
 1554 0267 1002     		.2byte	0x210
 1555 0269 85000000 		.4byte	0x85
 1556 026d 02       		.byte	0x2
 1557 026e 91       		.byte	0x91
 1558 026f 74       		.sleb128 -12
 1559 0270 00       		.byte	0
 1560 0271 0F       		.uleb128 0xf
 1561 0272 01       		.byte	0x1
 1562 0273 CE020000 		.4byte	.LASF40
 1563 0277 01       		.byte	0x1
 1564 0278 2502     		.2byte	0x225
 1565 027a 01       		.byte	0x1
 1566 027b 00000000 		.4byte	.LFB10
 1567 027f 2C000000 		.4byte	.LFE10
 1568 0283 F4010000 		.4byte	.LLST10
 1569 0287 01       		.byte	0x1
 1570 0288 9C020000 		.4byte	0x29c
 1571 028c 0C       		.uleb128 0xc
 1572 028d 6F000000 		.4byte	.LASF41
 1573 0291 01       		.byte	0x1
 1574 0292 2502     		.2byte	0x225
 1575 0294 85000000 		.4byte	0x85
 1576 0298 02       		.byte	0x2
 1577 0299 91       		.byte	0x91
 1578 029a 74       		.sleb128 -12
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 43


 1579 029b 00       		.byte	0
 1580 029c 0F       		.uleb128 0xf
 1581 029d 01       		.byte	0x1
 1582 029e 00000000 		.4byte	.LASF42
 1583 02a2 01       		.byte	0x1
 1584 02a3 3D02     		.2byte	0x23d
 1585 02a5 01       		.byte	0x1
 1586 02a6 00000000 		.4byte	.LFB11
 1587 02aa 1C000000 		.4byte	.LFE11
 1588 02ae 2C020000 		.4byte	.LLST11
 1589 02b2 01       		.byte	0x1
 1590 02b3 C7020000 		.4byte	0x2c7
 1591 02b7 0C       		.uleb128 0xc
 1592 02b8 12030000 		.4byte	.LASF37
 1593 02bc 01       		.byte	0x1
 1594 02bd 3D02     		.2byte	0x23d
 1595 02bf 85000000 		.4byte	0x85
 1596 02c3 02       		.byte	0x2
 1597 02c4 91       		.byte	0x91
 1598 02c5 74       		.sleb128 -12
 1599 02c6 00       		.byte	0
 1600 02c7 0F       		.uleb128 0xf
 1601 02c8 01       		.byte	0x1
 1602 02c9 45030000 		.4byte	.LASF43
 1603 02cd 01       		.byte	0x1
 1604 02ce 5402     		.2byte	0x254
 1605 02d0 01       		.byte	0x1
 1606 02d1 00000000 		.4byte	.LFB12
 1607 02d5 1C000000 		.4byte	.LFE12
 1608 02d9 64020000 		.4byte	.LLST12
 1609 02dd 01       		.byte	0x1
 1610 02de F2020000 		.4byte	0x2f2
 1611 02e2 0C       		.uleb128 0xc
 1612 02e3 12030000 		.4byte	.LASF37
 1613 02e7 01       		.byte	0x1
 1614 02e8 5402     		.2byte	0x254
 1615 02ea 85000000 		.4byte	0x85
 1616 02ee 02       		.byte	0x2
 1617 02ef 91       		.byte	0x91
 1618 02f0 74       		.sleb128 -12
 1619 02f1 00       		.byte	0
 1620 02f2 10       		.uleb128 0x10
 1621 02f3 01       		.byte	0x1
 1622 02f4 AD030000 		.4byte	.LASF44
 1623 02f8 01       		.byte	0x1
 1624 02f9 7002     		.2byte	0x270
 1625 02fb 01       		.byte	0x1
 1626 02fc 00000000 		.4byte	.LFB13
 1627 0300 30000000 		.4byte	.LFE13
 1628 0304 9C020000 		.4byte	.LLST13
 1629 0308 01       		.byte	0x1
 1630 0309 2C030000 		.4byte	0x32c
 1631 030d 0C       		.uleb128 0xc
 1632 030e EF020000 		.4byte	.LASF33
 1633 0312 01       		.byte	0x1
 1634 0313 7002     		.2byte	0x270
 1635 0315 85000000 		.4byte	0x85
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 44


 1636 0319 02       		.byte	0x2
 1637 031a 91       		.byte	0x91
 1638 031b 74       		.sleb128 -12
 1639 031c 0C       		.uleb128 0xc
 1640 031d B5010000 		.4byte	.LASF45
 1641 0321 01       		.byte	0x1
 1642 0322 7002     		.2byte	0x270
 1643 0324 90000000 		.4byte	0x90
 1644 0328 02       		.byte	0x2
 1645 0329 91       		.byte	0x91
 1646 032a 72       		.sleb128 -14
 1647 032b 00       		.byte	0
 1648 032c 10       		.uleb128 0x10
 1649 032d 01       		.byte	0x1
 1650 032e 96000000 		.4byte	.LASF46
 1651 0332 01       		.byte	0x1
 1652 0333 9202     		.2byte	0x292
 1653 0335 01       		.byte	0x1
 1654 0336 00000000 		.4byte	.LFB14
 1655 033a 2C000000 		.4byte	.LFE14
 1656 033e D4020000 		.4byte	.LLST14
 1657 0342 01       		.byte	0x1
 1658 0343 66030000 		.4byte	0x366
 1659 0347 0C       		.uleb128 0xc
 1660 0348 EF020000 		.4byte	.LASF33
 1661 034c 01       		.byte	0x1
 1662 034d 9202     		.2byte	0x292
 1663 034f 85000000 		.4byte	0x85
 1664 0353 02       		.byte	0x2
 1665 0354 91       		.byte	0x91
 1666 0355 74       		.sleb128 -12
 1667 0356 0C       		.uleb128 0xc
 1668 0357 32020000 		.4byte	.LASF47
 1669 035b 01       		.byte	0x1
 1670 035c 9202     		.2byte	0x292
 1671 035e 9B000000 		.4byte	0x9b
 1672 0362 02       		.byte	0x2
 1673 0363 91       		.byte	0x91
 1674 0364 70       		.sleb128 -16
 1675 0365 00       		.byte	0
 1676 0366 0E       		.uleb128 0xe
 1677 0367 01       		.byte	0x1
 1678 0368 1B000000 		.4byte	.LASF48
 1679 036c 01       		.byte	0x1
 1680 036d B302     		.2byte	0x2b3
 1681 036f 01       		.byte	0x1
 1682 0370 90000000 		.4byte	0x90
 1683 0374 00000000 		.4byte	.LFB15
 1684 0378 A4000000 		.4byte	.LFE15
 1685 037c 0C030000 		.4byte	.LLST15
 1686 0380 01       		.byte	0x1
 1687 0381 B3030000 		.4byte	0x3b3
 1688 0385 0C       		.uleb128 0xc
 1689 0386 EF020000 		.4byte	.LASF33
 1690 038a 01       		.byte	0x1
 1691 038b B302     		.2byte	0x2b3
 1692 038d 85000000 		.4byte	0x85
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 45


 1693 0391 02       		.byte	0x2
 1694 0392 91       		.byte	0x91
 1695 0393 6C       		.sleb128 -20
 1696 0394 0C       		.uleb128 0xc
 1697 0395 41020000 		.4byte	.LASF49
 1698 0399 01       		.byte	0x1
 1699 039a B302     		.2byte	0x2b3
 1700 039c 90000000 		.4byte	0x90
 1701 03a0 02       		.byte	0x2
 1702 03a1 91       		.byte	0x91
 1703 03a2 6A       		.sleb128 -22
 1704 03a3 0D       		.uleb128 0xd
 1705 03a4 F4020000 		.4byte	.LASF50
 1706 03a8 01       		.byte	0x1
 1707 03a9 B502     		.2byte	0x2b5
 1708 03ab 90000000 		.4byte	0x90
 1709 03af 02       		.byte	0x2
 1710 03b0 91       		.byte	0x91
 1711 03b1 76       		.sleb128 -10
 1712 03b2 00       		.byte	0
 1713 03b3 0E       		.uleb128 0xe
 1714 03b4 01       		.byte	0x1
 1715 03b5 92020000 		.4byte	.LASF51
 1716 03b9 01       		.byte	0x1
 1717 03ba E902     		.2byte	0x2e9
 1718 03bc 01       		.byte	0x1
 1719 03bd 9B000000 		.4byte	0x9b
 1720 03c1 00000000 		.4byte	.LFB16
 1721 03c5 98000000 		.4byte	.LFE16
 1722 03c9 44030000 		.4byte	.LLST16
 1723 03cd 01       		.byte	0x1
 1724 03ce 00040000 		.4byte	0x400
 1725 03d2 0C       		.uleb128 0xc
 1726 03d3 EF020000 		.4byte	.LASF33
 1727 03d7 01       		.byte	0x1
 1728 03d8 E902     		.2byte	0x2e9
 1729 03da 85000000 		.4byte	0x85
 1730 03de 02       		.byte	0x2
 1731 03df 91       		.byte	0x91
 1732 03e0 64       		.sleb128 -28
 1733 03e1 0C       		.uleb128 0xc
 1734 03e2 41020000 		.4byte	.LASF49
 1735 03e6 01       		.byte	0x1
 1736 03e7 E902     		.2byte	0x2e9
 1737 03e9 90000000 		.4byte	0x90
 1738 03ed 02       		.byte	0x2
 1739 03ee 91       		.byte	0x91
 1740 03ef 62       		.sleb128 -30
 1741 03f0 0D       		.uleb128 0xd
 1742 03f1 B5000000 		.4byte	.LASF52
 1743 03f5 01       		.byte	0x1
 1744 03f6 EB02     		.2byte	0x2eb
 1745 03f8 BF000000 		.4byte	0xbf
 1746 03fc 02       		.byte	0x2
 1747 03fd 91       		.byte	0x91
 1748 03fe 68       		.sleb128 -24
 1749 03ff 00       		.byte	0
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 46


 1750 0400 0E       		.uleb128 0xe
 1751 0401 01       		.byte	0x1
 1752 0402 D4000000 		.4byte	.LASF53
 1753 0406 01       		.byte	0x1
 1754 0407 1603     		.2byte	0x316
 1755 0409 01       		.byte	0x1
 1756 040a A6000000 		.4byte	0xa6
 1757 040e 00000000 		.4byte	.LFB17
 1758 0412 80000000 		.4byte	.LFE17
 1759 0416 7C030000 		.4byte	.LLST17
 1760 041a 01       		.byte	0x1
 1761 041b 4D040000 		.4byte	0x44d
 1762 041f 0C       		.uleb128 0xc
 1763 0420 EF020000 		.4byte	.LASF33
 1764 0424 01       		.byte	0x1
 1765 0425 1603     		.2byte	0x316
 1766 0427 85000000 		.4byte	0x85
 1767 042b 02       		.byte	0x2
 1768 042c 91       		.byte	0x91
 1769 042d 64       		.sleb128 -28
 1770 042e 0C       		.uleb128 0xc
 1771 042f 41020000 		.4byte	.LASF49
 1772 0433 01       		.byte	0x1
 1773 0434 1603     		.2byte	0x316
 1774 0436 90000000 		.4byte	0x90
 1775 043a 02       		.byte	0x2
 1776 043b 91       		.byte	0x91
 1777 043c 62       		.sleb128 -30
 1778 043d 0D       		.uleb128 0xd
 1779 043e E9020000 		.4byte	.LASF54
 1780 0442 01       		.byte	0x1
 1781 0443 1803     		.2byte	0x318
 1782 0445 A6000000 		.4byte	0xa6
 1783 0449 02       		.byte	0x2
 1784 044a 91       		.byte	0x91
 1785 044b 6C       		.sleb128 -20
 1786 044c 00       		.byte	0
 1787 044d 11       		.uleb128 0x11
 1788 044e 85000000 		.4byte	0x85
 1789 0452 5D040000 		.4byte	0x45d
 1790 0456 12       		.uleb128 0x12
 1791 0457 E1000000 		.4byte	0xe1
 1792 045b 00       		.byte	0
 1793 045c 00       		.byte	0
 1794 045d 08       		.uleb128 0x8
 1795 045e 79000000 		.4byte	.LASF55
 1796 0462 01       		.byte	0x1
 1797 0463 22       		.byte	0x22
 1798 0464 6E040000 		.4byte	0x46e
 1799 0468 05       		.byte	0x5
 1800 0469 03       		.byte	0x3
 1801 046a 00000000 		.4byte	ADC_SAR_Seq_0_channelsConfig
 1802 046e 13       		.uleb128 0x13
 1803 046f 4D040000 		.4byte	0x44d
 1804 0473 14       		.uleb128 0x14
 1805 0474 1D030000 		.4byte	.LASF56
 1806 0478 01       		.byte	0x1
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 47


 1807 0479 19       		.byte	0x19
 1808 047a 6F000000 		.4byte	0x6f
 1809 047e 01       		.byte	0x1
 1810 047f 05       		.byte	0x5
 1811 0480 03       		.byte	0x3
 1812 0481 00000000 		.4byte	ADC_SAR_Seq_0_initVar
 1813 0485 11       		.uleb128 0x11
 1814 0486 90000000 		.4byte	0x90
 1815 048a 95040000 		.4byte	0x495
 1816 048e 12       		.uleb128 0x12
 1817 048f E1000000 		.4byte	0xe1
 1818 0493 00       		.byte	0
 1819 0494 00       		.byte	0
 1820 0495 14       		.uleb128 0x14
 1821 0496 34010000 		.4byte	.LASF57
 1822 049a 01       		.byte	0x1
 1823 049b 1A       		.byte	0x1a
 1824 049c A7040000 		.4byte	0x4a7
 1825 04a0 01       		.byte	0x1
 1826 04a1 05       		.byte	0x5
 1827 04a2 03       		.byte	0x3
 1828 04a3 00000000 		.4byte	ADC_SAR_Seq_0_offset
 1829 04a7 05       		.uleb128 0x5
 1830 04a8 85040000 		.4byte	0x485
 1831 04ac 11       		.uleb128 0x11
 1832 04ad 9B000000 		.4byte	0x9b
 1833 04b1 BC040000 		.4byte	0x4bc
 1834 04b5 12       		.uleb128 0x12
 1835 04b6 E1000000 		.4byte	0xe1
 1836 04ba 00       		.byte	0
 1837 04bb 00       		.byte	0
 1838 04bc 14       		.uleb128 0x14
 1839 04bd B0020000 		.4byte	.LASF58
 1840 04c1 01       		.byte	0x1
 1841 04c2 1B       		.byte	0x1b
 1842 04c3 CE040000 		.4byte	0x4ce
 1843 04c7 01       		.byte	0x1
 1844 04c8 05       		.byte	0x5
 1845 04c9 03       		.byte	0x3
 1846 04ca 00000000 		.4byte	ADC_SAR_Seq_0_countsPer10Volt
 1847 04ce 05       		.uleb128 0x5
 1848 04cf AC040000 		.4byte	0x4ac
 1849 04d3 00       		.byte	0
 1850              		.section	.debug_abbrev,"",%progbits
 1851              	.Ldebug_abbrev0:
 1852 0000 01       		.uleb128 0x1
 1853 0001 11       		.uleb128 0x11
 1854 0002 01       		.byte	0x1
 1855 0003 25       		.uleb128 0x25
 1856 0004 0E       		.uleb128 0xe
 1857 0005 13       		.uleb128 0x13
 1858 0006 0B       		.uleb128 0xb
 1859 0007 03       		.uleb128 0x3
 1860 0008 0E       		.uleb128 0xe
 1861 0009 1B       		.uleb128 0x1b
 1862 000a 0E       		.uleb128 0xe
 1863 000b 55       		.uleb128 0x55
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 48


 1864 000c 06       		.uleb128 0x6
 1865 000d 11       		.uleb128 0x11
 1866 000e 01       		.uleb128 0x1
 1867 000f 52       		.uleb128 0x52
 1868 0010 01       		.uleb128 0x1
 1869 0011 10       		.uleb128 0x10
 1870 0012 06       		.uleb128 0x6
 1871 0013 00       		.byte	0
 1872 0014 00       		.byte	0
 1873 0015 02       		.uleb128 0x2
 1874 0016 24       		.uleb128 0x24
 1875 0017 00       		.byte	0
 1876 0018 0B       		.uleb128 0xb
 1877 0019 0B       		.uleb128 0xb
 1878 001a 3E       		.uleb128 0x3e
 1879 001b 0B       		.uleb128 0xb
 1880 001c 03       		.uleb128 0x3
 1881 001d 0E       		.uleb128 0xe
 1882 001e 00       		.byte	0
 1883 001f 00       		.byte	0
 1884 0020 03       		.uleb128 0x3
 1885 0021 24       		.uleb128 0x24
 1886 0022 00       		.byte	0
 1887 0023 0B       		.uleb128 0xb
 1888 0024 0B       		.uleb128 0xb
 1889 0025 3E       		.uleb128 0x3e
 1890 0026 0B       		.uleb128 0xb
 1891 0027 03       		.uleb128 0x3
 1892 0028 08       		.uleb128 0x8
 1893 0029 00       		.byte	0
 1894 002a 00       		.byte	0
 1895 002b 04       		.uleb128 0x4
 1896 002c 16       		.uleb128 0x16
 1897 002d 00       		.byte	0
 1898 002e 03       		.uleb128 0x3
 1899 002f 0E       		.uleb128 0xe
 1900 0030 3A       		.uleb128 0x3a
 1901 0031 0B       		.uleb128 0xb
 1902 0032 3B       		.uleb128 0x3b
 1903 0033 0B       		.uleb128 0xb
 1904 0034 49       		.uleb128 0x49
 1905 0035 13       		.uleb128 0x13
 1906 0036 00       		.byte	0
 1907 0037 00       		.byte	0
 1908 0038 05       		.uleb128 0x5
 1909 0039 35       		.uleb128 0x35
 1910 003a 00       		.byte	0
 1911 003b 49       		.uleb128 0x49
 1912 003c 13       		.uleb128 0x13
 1913 003d 00       		.byte	0
 1914 003e 00       		.byte	0
 1915 003f 06       		.uleb128 0x6
 1916 0040 2E       		.uleb128 0x2e
 1917 0041 00       		.byte	0
 1918 0042 3F       		.uleb128 0x3f
 1919 0043 0C       		.uleb128 0xc
 1920 0044 03       		.uleb128 0x3
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 49


 1921 0045 0E       		.uleb128 0xe
 1922 0046 3A       		.uleb128 0x3a
 1923 0047 0B       		.uleb128 0xb
 1924 0048 3B       		.uleb128 0x3b
 1925 0049 0B       		.uleb128 0xb
 1926 004a 27       		.uleb128 0x27
 1927 004b 0C       		.uleb128 0xc
 1928 004c 11       		.uleb128 0x11
 1929 004d 01       		.uleb128 0x1
 1930 004e 12       		.uleb128 0x12
 1931 004f 01       		.uleb128 0x1
 1932 0050 40       		.uleb128 0x40
 1933 0051 06       		.uleb128 0x6
 1934 0052 9642     		.uleb128 0x2116
 1935 0054 0C       		.uleb128 0xc
 1936 0055 00       		.byte	0
 1937 0056 00       		.byte	0
 1938 0057 07       		.uleb128 0x7
 1939 0058 2E       		.uleb128 0x2e
 1940 0059 01       		.byte	0x1
 1941 005a 3F       		.uleb128 0x3f
 1942 005b 0C       		.uleb128 0xc
 1943 005c 03       		.uleb128 0x3
 1944 005d 0E       		.uleb128 0xe
 1945 005e 3A       		.uleb128 0x3a
 1946 005f 0B       		.uleb128 0xb
 1947 0060 3B       		.uleb128 0x3b
 1948 0061 0B       		.uleb128 0xb
 1949 0062 27       		.uleb128 0x27
 1950 0063 0C       		.uleb128 0xc
 1951 0064 11       		.uleb128 0x11
 1952 0065 01       		.uleb128 0x1
 1953 0066 12       		.uleb128 0x12
 1954 0067 01       		.uleb128 0x1
 1955 0068 40       		.uleb128 0x40
 1956 0069 06       		.uleb128 0x6
 1957 006a 9642     		.uleb128 0x2116
 1958 006c 0C       		.uleb128 0xc
 1959 006d 01       		.uleb128 0x1
 1960 006e 13       		.uleb128 0x13
 1961 006f 00       		.byte	0
 1962 0070 00       		.byte	0
 1963 0071 08       		.uleb128 0x8
 1964 0072 34       		.uleb128 0x34
 1965 0073 00       		.byte	0
 1966 0074 03       		.uleb128 0x3
 1967 0075 0E       		.uleb128 0xe
 1968 0076 3A       		.uleb128 0x3a
 1969 0077 0B       		.uleb128 0xb
 1970 0078 3B       		.uleb128 0x3b
 1971 0079 0B       		.uleb128 0xb
 1972 007a 49       		.uleb128 0x49
 1973 007b 13       		.uleb128 0x13
 1974 007c 02       		.uleb128 0x2
 1975 007d 0A       		.uleb128 0xa
 1976 007e 00       		.byte	0
 1977 007f 00       		.byte	0
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 50


 1978 0080 09       		.uleb128 0x9
 1979 0081 2E       		.uleb128 0x2e
 1980 0082 00       		.byte	0
 1981 0083 3F       		.uleb128 0x3f
 1982 0084 0C       		.uleb128 0xc
 1983 0085 03       		.uleb128 0x3
 1984 0086 0E       		.uleb128 0xe
 1985 0087 3A       		.uleb128 0x3a
 1986 0088 0B       		.uleb128 0xb
 1987 0089 3B       		.uleb128 0x3b
 1988 008a 05       		.uleb128 0x5
 1989 008b 27       		.uleb128 0x27
 1990 008c 0C       		.uleb128 0xc
 1991 008d 11       		.uleb128 0x11
 1992 008e 01       		.uleb128 0x1
 1993 008f 12       		.uleb128 0x12
 1994 0090 01       		.uleb128 0x1
 1995 0091 40       		.uleb128 0x40
 1996 0092 06       		.uleb128 0x6
 1997 0093 9642     		.uleb128 0x2116
 1998 0095 0C       		.uleb128 0xc
 1999 0096 00       		.byte	0
 2000 0097 00       		.byte	0
 2001 0098 0A       		.uleb128 0xa
 2002 0099 2E       		.uleb128 0x2e
 2003 009a 00       		.byte	0
 2004 009b 3F       		.uleb128 0x3f
 2005 009c 0C       		.uleb128 0xc
 2006 009d 03       		.uleb128 0x3
 2007 009e 0E       		.uleb128 0xe
 2008 009f 3A       		.uleb128 0x3a
 2009 00a0 0B       		.uleb128 0xb
 2010 00a1 3B       		.uleb128 0x3b
 2011 00a2 05       		.uleb128 0x5
 2012 00a3 27       		.uleb128 0x27
 2013 00a4 0C       		.uleb128 0xc
 2014 00a5 11       		.uleb128 0x11
 2015 00a6 01       		.uleb128 0x1
 2016 00a7 12       		.uleb128 0x12
 2017 00a8 01       		.uleb128 0x1
 2018 00a9 40       		.uleb128 0x40
 2019 00aa 06       		.uleb128 0x6
 2020 00ab 9742     		.uleb128 0x2117
 2021 00ad 0C       		.uleb128 0xc
 2022 00ae 00       		.byte	0
 2023 00af 00       		.byte	0
 2024 00b0 0B       		.uleb128 0xb
 2025 00b1 2E       		.uleb128 0x2e
 2026 00b2 01       		.byte	0x1
 2027 00b3 3F       		.uleb128 0x3f
 2028 00b4 0C       		.uleb128 0xc
 2029 00b5 03       		.uleb128 0x3
 2030 00b6 0E       		.uleb128 0xe
 2031 00b7 3A       		.uleb128 0x3a
 2032 00b8 0B       		.uleb128 0xb
 2033 00b9 3B       		.uleb128 0x3b
 2034 00ba 05       		.uleb128 0x5
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 51


 2035 00bb 27       		.uleb128 0x27
 2036 00bc 0C       		.uleb128 0xc
 2037 00bd 49       		.uleb128 0x49
 2038 00be 13       		.uleb128 0x13
 2039 00bf 11       		.uleb128 0x11
 2040 00c0 01       		.uleb128 0x1
 2041 00c1 12       		.uleb128 0x12
 2042 00c2 01       		.uleb128 0x1
 2043 00c3 40       		.uleb128 0x40
 2044 00c4 06       		.uleb128 0x6
 2045 00c5 9742     		.uleb128 0x2117
 2046 00c7 0C       		.uleb128 0xc
 2047 00c8 01       		.uleb128 0x1
 2048 00c9 13       		.uleb128 0x13
 2049 00ca 00       		.byte	0
 2050 00cb 00       		.byte	0
 2051 00cc 0C       		.uleb128 0xc
 2052 00cd 05       		.uleb128 0x5
 2053 00ce 00       		.byte	0
 2054 00cf 03       		.uleb128 0x3
 2055 00d0 0E       		.uleb128 0xe
 2056 00d1 3A       		.uleb128 0x3a
 2057 00d2 0B       		.uleb128 0xb
 2058 00d3 3B       		.uleb128 0x3b
 2059 00d4 05       		.uleb128 0x5
 2060 00d5 49       		.uleb128 0x49
 2061 00d6 13       		.uleb128 0x13
 2062 00d7 02       		.uleb128 0x2
 2063 00d8 0A       		.uleb128 0xa
 2064 00d9 00       		.byte	0
 2065 00da 00       		.byte	0
 2066 00db 0D       		.uleb128 0xd
 2067 00dc 34       		.uleb128 0x34
 2068 00dd 00       		.byte	0
 2069 00de 03       		.uleb128 0x3
 2070 00df 0E       		.uleb128 0xe
 2071 00e0 3A       		.uleb128 0x3a
 2072 00e1 0B       		.uleb128 0xb
 2073 00e2 3B       		.uleb128 0x3b
 2074 00e3 05       		.uleb128 0x5
 2075 00e4 49       		.uleb128 0x49
 2076 00e5 13       		.uleb128 0x13
 2077 00e6 02       		.uleb128 0x2
 2078 00e7 0A       		.uleb128 0xa
 2079 00e8 00       		.byte	0
 2080 00e9 00       		.byte	0
 2081 00ea 0E       		.uleb128 0xe
 2082 00eb 2E       		.uleb128 0x2e
 2083 00ec 01       		.byte	0x1
 2084 00ed 3F       		.uleb128 0x3f
 2085 00ee 0C       		.uleb128 0xc
 2086 00ef 03       		.uleb128 0x3
 2087 00f0 0E       		.uleb128 0xe
 2088 00f1 3A       		.uleb128 0x3a
 2089 00f2 0B       		.uleb128 0xb
 2090 00f3 3B       		.uleb128 0x3b
 2091 00f4 05       		.uleb128 0x5
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 52


 2092 00f5 27       		.uleb128 0x27
 2093 00f6 0C       		.uleb128 0xc
 2094 00f7 49       		.uleb128 0x49
 2095 00f8 13       		.uleb128 0x13
 2096 00f9 11       		.uleb128 0x11
 2097 00fa 01       		.uleb128 0x1
 2098 00fb 12       		.uleb128 0x12
 2099 00fc 01       		.uleb128 0x1
 2100 00fd 40       		.uleb128 0x40
 2101 00fe 06       		.uleb128 0x6
 2102 00ff 9642     		.uleb128 0x2116
 2103 0101 0C       		.uleb128 0xc
 2104 0102 01       		.uleb128 0x1
 2105 0103 13       		.uleb128 0x13
 2106 0104 00       		.byte	0
 2107 0105 00       		.byte	0
 2108 0106 0F       		.uleb128 0xf
 2109 0107 2E       		.uleb128 0x2e
 2110 0108 01       		.byte	0x1
 2111 0109 3F       		.uleb128 0x3f
 2112 010a 0C       		.uleb128 0xc
 2113 010b 03       		.uleb128 0x3
 2114 010c 0E       		.uleb128 0xe
 2115 010d 3A       		.uleb128 0x3a
 2116 010e 0B       		.uleb128 0xb
 2117 010f 3B       		.uleb128 0x3b
 2118 0110 05       		.uleb128 0x5
 2119 0111 27       		.uleb128 0x27
 2120 0112 0C       		.uleb128 0xc
 2121 0113 11       		.uleb128 0x11
 2122 0114 01       		.uleb128 0x1
 2123 0115 12       		.uleb128 0x12
 2124 0116 01       		.uleb128 0x1
 2125 0117 40       		.uleb128 0x40
 2126 0118 06       		.uleb128 0x6
 2127 0119 9742     		.uleb128 0x2117
 2128 011b 0C       		.uleb128 0xc
 2129 011c 01       		.uleb128 0x1
 2130 011d 13       		.uleb128 0x13
 2131 011e 00       		.byte	0
 2132 011f 00       		.byte	0
 2133 0120 10       		.uleb128 0x10
 2134 0121 2E       		.uleb128 0x2e
 2135 0122 01       		.byte	0x1
 2136 0123 3F       		.uleb128 0x3f
 2137 0124 0C       		.uleb128 0xc
 2138 0125 03       		.uleb128 0x3
 2139 0126 0E       		.uleb128 0xe
 2140 0127 3A       		.uleb128 0x3a
 2141 0128 0B       		.uleb128 0xb
 2142 0129 3B       		.uleb128 0x3b
 2143 012a 05       		.uleb128 0x5
 2144 012b 27       		.uleb128 0x27
 2145 012c 0C       		.uleb128 0xc
 2146 012d 11       		.uleb128 0x11
 2147 012e 01       		.uleb128 0x1
 2148 012f 12       		.uleb128 0x12
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 53


 2149 0130 01       		.uleb128 0x1
 2150 0131 40       		.uleb128 0x40
 2151 0132 06       		.uleb128 0x6
 2152 0133 9642     		.uleb128 0x2116
 2153 0135 0C       		.uleb128 0xc
 2154 0136 01       		.uleb128 0x1
 2155 0137 13       		.uleb128 0x13
 2156 0138 00       		.byte	0
 2157 0139 00       		.byte	0
 2158 013a 11       		.uleb128 0x11
 2159 013b 01       		.uleb128 0x1
 2160 013c 01       		.byte	0x1
 2161 013d 49       		.uleb128 0x49
 2162 013e 13       		.uleb128 0x13
 2163 013f 01       		.uleb128 0x1
 2164 0140 13       		.uleb128 0x13
 2165 0141 00       		.byte	0
 2166 0142 00       		.byte	0
 2167 0143 12       		.uleb128 0x12
 2168 0144 21       		.uleb128 0x21
 2169 0145 00       		.byte	0
 2170 0146 49       		.uleb128 0x49
 2171 0147 13       		.uleb128 0x13
 2172 0148 2F       		.uleb128 0x2f
 2173 0149 0B       		.uleb128 0xb
 2174 014a 00       		.byte	0
 2175 014b 00       		.byte	0
 2176 014c 13       		.uleb128 0x13
 2177 014d 26       		.uleb128 0x26
 2178 014e 00       		.byte	0
 2179 014f 49       		.uleb128 0x49
 2180 0150 13       		.uleb128 0x13
 2181 0151 00       		.byte	0
 2182 0152 00       		.byte	0
 2183 0153 14       		.uleb128 0x14
 2184 0154 34       		.uleb128 0x34
 2185 0155 00       		.byte	0
 2186 0156 03       		.uleb128 0x3
 2187 0157 0E       		.uleb128 0xe
 2188 0158 3A       		.uleb128 0x3a
 2189 0159 0B       		.uleb128 0xb
 2190 015a 3B       		.uleb128 0x3b
 2191 015b 0B       		.uleb128 0xb
 2192 015c 49       		.uleb128 0x49
 2193 015d 13       		.uleb128 0x13
 2194 015e 3F       		.uleb128 0x3f
 2195 015f 0C       		.uleb128 0xc
 2196 0160 02       		.uleb128 0x2
 2197 0161 0A       		.uleb128 0xa
 2198 0162 00       		.byte	0
 2199 0163 00       		.byte	0
 2200 0164 00       		.byte	0
 2201              		.section	.debug_loc,"",%progbits
 2202              	.Ldebug_loc0:
 2203              	.LLST0:
 2204 0000 00000000 		.4byte	.LFB0
 2205 0004 02000000 		.4byte	.LCFI0
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 54


 2206 0008 0200     		.2byte	0x2
 2207 000a 7D       		.byte	0x7d
 2208 000b 00       		.sleb128 0
 2209 000c 02000000 		.4byte	.LCFI0
 2210 0010 04000000 		.4byte	.LCFI1
 2211 0014 0200     		.2byte	0x2
 2212 0016 7D       		.byte	0x7d
 2213 0017 08       		.sleb128 8
 2214 0018 04000000 		.4byte	.LCFI1
 2215 001c 24000000 		.4byte	.LFE0
 2216 0020 0200     		.2byte	0x2
 2217 0022 77       		.byte	0x77
 2218 0023 08       		.sleb128 8
 2219 0024 00000000 		.4byte	0
 2220 0028 00000000 		.4byte	0
 2221              	.LLST1:
 2222 002c 00000000 		.4byte	.LFB1
 2223 0030 02000000 		.4byte	.LCFI2
 2224 0034 0200     		.2byte	0x2
 2225 0036 7D       		.byte	0x7d
 2226 0037 00       		.sleb128 0
 2227 0038 02000000 		.4byte	.LCFI2
 2228 003c 04000000 		.4byte	.LCFI3
 2229 0040 0200     		.2byte	0x2
 2230 0042 7D       		.byte	0x7d
 2231 0043 0C       		.sleb128 12
 2232 0044 04000000 		.4byte	.LCFI3
 2233 0048 06000000 		.4byte	.LCFI4
 2234 004c 0200     		.2byte	0x2
 2235 004e 7D       		.byte	0x7d
 2236 004f 20       		.sleb128 32
 2237 0050 06000000 		.4byte	.LCFI4
 2238 0054 C0010000 		.4byte	.LFE1
 2239 0058 0200     		.2byte	0x2
 2240 005a 77       		.byte	0x77
 2241 005b 20       		.sleb128 32
 2242 005c 00000000 		.4byte	0
 2243 0060 00000000 		.4byte	0
 2244              	.LLST2:
 2245 0064 00000000 		.4byte	.LFB2
 2246 0068 02000000 		.4byte	.LCFI5
 2247 006c 0200     		.2byte	0x2
 2248 006e 7D       		.byte	0x7d
 2249 006f 00       		.sleb128 0
 2250 0070 02000000 		.4byte	.LCFI5
 2251 0074 04000000 		.4byte	.LCFI6
 2252 0078 0200     		.2byte	0x2
 2253 007a 7D       		.byte	0x7d
 2254 007b 08       		.sleb128 8
 2255 007c 04000000 		.4byte	.LCFI6
 2256 0080 20000000 		.4byte	.LFE2
 2257 0084 0200     		.2byte	0x2
 2258 0086 77       		.byte	0x77
 2259 0087 08       		.sleb128 8
 2260 0088 00000000 		.4byte	0
 2261 008c 00000000 		.4byte	0
 2262              	.LLST3:
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 55


 2263 0090 00000000 		.4byte	.LFB3
 2264 0094 02000000 		.4byte	.LCFI7
 2265 0098 0200     		.2byte	0x2
 2266 009a 7D       		.byte	0x7d
 2267 009b 00       		.sleb128 0
 2268 009c 02000000 		.4byte	.LCFI7
 2269 00a0 04000000 		.4byte	.LCFI8
 2270 00a4 0200     		.2byte	0x2
 2271 00a6 7D       		.byte	0x7d
 2272 00a7 08       		.sleb128 8
 2273 00a8 04000000 		.4byte	.LCFI8
 2274 00ac 18000000 		.4byte	.LFE3
 2275 00b0 0200     		.2byte	0x2
 2276 00b2 77       		.byte	0x77
 2277 00b3 08       		.sleb128 8
 2278 00b4 00000000 		.4byte	0
 2279 00b8 00000000 		.4byte	0
 2280              	.LLST4:
 2281 00bc 00000000 		.4byte	.LFB4
 2282 00c0 02000000 		.4byte	.LCFI9
 2283 00c4 0200     		.2byte	0x2
 2284 00c6 7D       		.byte	0x7d
 2285 00c7 00       		.sleb128 0
 2286 00c8 02000000 		.4byte	.LCFI9
 2287 00cc 04000000 		.4byte	.LCFI10
 2288 00d0 0200     		.2byte	0x2
 2289 00d2 7D       		.byte	0x7d
 2290 00d3 08       		.sleb128 8
 2291 00d4 04000000 		.4byte	.LCFI10
 2292 00d8 1C000000 		.4byte	.LFE4
 2293 00dc 0200     		.2byte	0x2
 2294 00de 77       		.byte	0x77
 2295 00df 08       		.sleb128 8
 2296 00e0 00000000 		.4byte	0
 2297 00e4 00000000 		.4byte	0
 2298              	.LLST5:
 2299 00e8 00000000 		.4byte	.LFB5
 2300 00ec 02000000 		.4byte	.LCFI11
 2301 00f0 0200     		.2byte	0x2
 2302 00f2 7D       		.byte	0x7d
 2303 00f3 00       		.sleb128 0
 2304 00f4 02000000 		.4byte	.LCFI11
 2305 00f8 04000000 		.4byte	.LCFI12
 2306 00fc 0200     		.2byte	0x2
 2307 00fe 7D       		.byte	0x7d
 2308 00ff 08       		.sleb128 8
 2309 0100 04000000 		.4byte	.LCFI12
 2310 0104 1C000000 		.4byte	.LFE5
 2311 0108 0200     		.2byte	0x2
 2312 010a 77       		.byte	0x77
 2313 010b 08       		.sleb128 8
 2314 010c 00000000 		.4byte	0
 2315 0110 00000000 		.4byte	0
 2316              	.LLST6:
 2317 0114 00000000 		.4byte	.LFB6
 2318 0118 02000000 		.4byte	.LCFI13
 2319 011c 0200     		.2byte	0x2
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 56


 2320 011e 7D       		.byte	0x7d
 2321 011f 00       		.sleb128 0
 2322 0120 02000000 		.4byte	.LCFI13
 2323 0124 04000000 		.4byte	.LCFI14
 2324 0128 0200     		.2byte	0x2
 2325 012a 7D       		.byte	0x7d
 2326 012b 08       		.sleb128 8
 2327 012c 04000000 		.4byte	.LCFI14
 2328 0130 06000000 		.4byte	.LCFI15
 2329 0134 0200     		.2byte	0x2
 2330 0136 7D       		.byte	0x7d
 2331 0137 18       		.sleb128 24
 2332 0138 06000000 		.4byte	.LCFI15
 2333 013c 48000000 		.4byte	.LFE6
 2334 0140 0200     		.2byte	0x2
 2335 0142 77       		.byte	0x77
 2336 0143 18       		.sleb128 24
 2337 0144 00000000 		.4byte	0
 2338 0148 00000000 		.4byte	0
 2339              	.LLST7:
 2340 014c 00000000 		.4byte	.LFB7
 2341 0150 02000000 		.4byte	.LCFI16
 2342 0154 0200     		.2byte	0x2
 2343 0156 7D       		.byte	0x7d
 2344 0157 00       		.sleb128 0
 2345 0158 02000000 		.4byte	.LCFI16
 2346 015c 04000000 		.4byte	.LCFI17
 2347 0160 0200     		.2byte	0x2
 2348 0162 7D       		.byte	0x7d
 2349 0163 08       		.sleb128 8
 2350 0164 04000000 		.4byte	.LCFI17
 2351 0168 06000000 		.4byte	.LCFI18
 2352 016c 0200     		.2byte	0x2
 2353 016e 7D       		.byte	0x7d
 2354 016f 18       		.sleb128 24
 2355 0170 06000000 		.4byte	.LCFI18
 2356 0174 44000000 		.4byte	.LFE7
 2357 0178 0200     		.2byte	0x2
 2358 017a 77       		.byte	0x77
 2359 017b 18       		.sleb128 24
 2360 017c 00000000 		.4byte	0
 2361 0180 00000000 		.4byte	0
 2362              	.LLST8:
 2363 0184 00000000 		.4byte	.LFB8
 2364 0188 02000000 		.4byte	.LCFI19
 2365 018c 0200     		.2byte	0x2
 2366 018e 7D       		.byte	0x7d
 2367 018f 00       		.sleb128 0
 2368 0190 02000000 		.4byte	.LCFI19
 2369 0194 04000000 		.4byte	.LCFI20
 2370 0198 0200     		.2byte	0x2
 2371 019a 7D       		.byte	0x7d
 2372 019b 08       		.sleb128 8
 2373 019c 04000000 		.4byte	.LCFI20
 2374 01a0 06000000 		.4byte	.LCFI21
 2375 01a4 0200     		.2byte	0x2
 2376 01a6 7D       		.byte	0x7d
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 57


 2377 01a7 10       		.sleb128 16
 2378 01a8 06000000 		.4byte	.LCFI21
 2379 01ac 1C000000 		.4byte	.LFE8
 2380 01b0 0200     		.2byte	0x2
 2381 01b2 77       		.byte	0x77
 2382 01b3 10       		.sleb128 16
 2383 01b4 00000000 		.4byte	0
 2384 01b8 00000000 		.4byte	0
 2385              	.LLST9:
 2386 01bc 00000000 		.4byte	.LFB9
 2387 01c0 02000000 		.4byte	.LCFI22
 2388 01c4 0200     		.2byte	0x2
 2389 01c6 7D       		.byte	0x7d
 2390 01c7 00       		.sleb128 0
 2391 01c8 02000000 		.4byte	.LCFI22
 2392 01cc 04000000 		.4byte	.LCFI23
 2393 01d0 0200     		.2byte	0x2
 2394 01d2 7D       		.byte	0x7d
 2395 01d3 08       		.sleb128 8
 2396 01d4 04000000 		.4byte	.LCFI23
 2397 01d8 06000000 		.4byte	.LCFI24
 2398 01dc 0200     		.2byte	0x2
 2399 01de 7D       		.byte	0x7d
 2400 01df 10       		.sleb128 16
 2401 01e0 06000000 		.4byte	.LCFI24
 2402 01e4 30000000 		.4byte	.LFE9
 2403 01e8 0200     		.2byte	0x2
 2404 01ea 77       		.byte	0x77
 2405 01eb 10       		.sleb128 16
 2406 01ec 00000000 		.4byte	0
 2407 01f0 00000000 		.4byte	0
 2408              	.LLST10:
 2409 01f4 00000000 		.4byte	.LFB10
 2410 01f8 02000000 		.4byte	.LCFI25
 2411 01fc 0200     		.2byte	0x2
 2412 01fe 7D       		.byte	0x7d
 2413 01ff 00       		.sleb128 0
 2414 0200 02000000 		.4byte	.LCFI25
 2415 0204 04000000 		.4byte	.LCFI26
 2416 0208 0200     		.2byte	0x2
 2417 020a 7D       		.byte	0x7d
 2418 020b 08       		.sleb128 8
 2419 020c 04000000 		.4byte	.LCFI26
 2420 0210 06000000 		.4byte	.LCFI27
 2421 0214 0200     		.2byte	0x2
 2422 0216 7D       		.byte	0x7d
 2423 0217 10       		.sleb128 16
 2424 0218 06000000 		.4byte	.LCFI27
 2425 021c 2C000000 		.4byte	.LFE10
 2426 0220 0200     		.2byte	0x2
 2427 0222 77       		.byte	0x77
 2428 0223 10       		.sleb128 16
 2429 0224 00000000 		.4byte	0
 2430 0228 00000000 		.4byte	0
 2431              	.LLST11:
 2432 022c 00000000 		.4byte	.LFB11
 2433 0230 02000000 		.4byte	.LCFI28
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 58


 2434 0234 0200     		.2byte	0x2
 2435 0236 7D       		.byte	0x7d
 2436 0237 00       		.sleb128 0
 2437 0238 02000000 		.4byte	.LCFI28
 2438 023c 04000000 		.4byte	.LCFI29
 2439 0240 0200     		.2byte	0x2
 2440 0242 7D       		.byte	0x7d
 2441 0243 08       		.sleb128 8
 2442 0244 04000000 		.4byte	.LCFI29
 2443 0248 06000000 		.4byte	.LCFI30
 2444 024c 0200     		.2byte	0x2
 2445 024e 7D       		.byte	0x7d
 2446 024f 10       		.sleb128 16
 2447 0250 06000000 		.4byte	.LCFI30
 2448 0254 1C000000 		.4byte	.LFE11
 2449 0258 0200     		.2byte	0x2
 2450 025a 77       		.byte	0x77
 2451 025b 10       		.sleb128 16
 2452 025c 00000000 		.4byte	0
 2453 0260 00000000 		.4byte	0
 2454              	.LLST12:
 2455 0264 00000000 		.4byte	.LFB12
 2456 0268 02000000 		.4byte	.LCFI31
 2457 026c 0200     		.2byte	0x2
 2458 026e 7D       		.byte	0x7d
 2459 026f 00       		.sleb128 0
 2460 0270 02000000 		.4byte	.LCFI31
 2461 0274 04000000 		.4byte	.LCFI32
 2462 0278 0200     		.2byte	0x2
 2463 027a 7D       		.byte	0x7d
 2464 027b 08       		.sleb128 8
 2465 027c 04000000 		.4byte	.LCFI32
 2466 0280 06000000 		.4byte	.LCFI33
 2467 0284 0200     		.2byte	0x2
 2468 0286 7D       		.byte	0x7d
 2469 0287 10       		.sleb128 16
 2470 0288 06000000 		.4byte	.LCFI33
 2471 028c 1C000000 		.4byte	.LFE12
 2472 0290 0200     		.2byte	0x2
 2473 0292 77       		.byte	0x77
 2474 0293 10       		.sleb128 16
 2475 0294 00000000 		.4byte	0
 2476 0298 00000000 		.4byte	0
 2477              	.LLST13:
 2478 029c 00000000 		.4byte	.LFB13
 2479 02a0 02000000 		.4byte	.LCFI34
 2480 02a4 0200     		.2byte	0x2
 2481 02a6 7D       		.byte	0x7d
 2482 02a7 00       		.sleb128 0
 2483 02a8 02000000 		.4byte	.LCFI34
 2484 02ac 04000000 		.4byte	.LCFI35
 2485 02b0 0200     		.2byte	0x2
 2486 02b2 7D       		.byte	0x7d
 2487 02b3 08       		.sleb128 8
 2488 02b4 04000000 		.4byte	.LCFI35
 2489 02b8 06000000 		.4byte	.LCFI36
 2490 02bc 0200     		.2byte	0x2
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 59


 2491 02be 7D       		.byte	0x7d
 2492 02bf 10       		.sleb128 16
 2493 02c0 06000000 		.4byte	.LCFI36
 2494 02c4 30000000 		.4byte	.LFE13
 2495 02c8 0200     		.2byte	0x2
 2496 02ca 77       		.byte	0x77
 2497 02cb 10       		.sleb128 16
 2498 02cc 00000000 		.4byte	0
 2499 02d0 00000000 		.4byte	0
 2500              	.LLST14:
 2501 02d4 00000000 		.4byte	.LFB14
 2502 02d8 02000000 		.4byte	.LCFI37
 2503 02dc 0200     		.2byte	0x2
 2504 02de 7D       		.byte	0x7d
 2505 02df 00       		.sleb128 0
 2506 02e0 02000000 		.4byte	.LCFI37
 2507 02e4 04000000 		.4byte	.LCFI38
 2508 02e8 0200     		.2byte	0x2
 2509 02ea 7D       		.byte	0x7d
 2510 02eb 08       		.sleb128 8
 2511 02ec 04000000 		.4byte	.LCFI38
 2512 02f0 06000000 		.4byte	.LCFI39
 2513 02f4 0200     		.2byte	0x2
 2514 02f6 7D       		.byte	0x7d
 2515 02f7 10       		.sleb128 16
 2516 02f8 06000000 		.4byte	.LCFI39
 2517 02fc 2C000000 		.4byte	.LFE14
 2518 0300 0200     		.2byte	0x2
 2519 0302 77       		.byte	0x77
 2520 0303 10       		.sleb128 16
 2521 0304 00000000 		.4byte	0
 2522 0308 00000000 		.4byte	0
 2523              	.LLST15:
 2524 030c 00000000 		.4byte	.LFB15
 2525 0310 02000000 		.4byte	.LCFI40
 2526 0314 0200     		.2byte	0x2
 2527 0316 7D       		.byte	0x7d
 2528 0317 00       		.sleb128 0
 2529 0318 02000000 		.4byte	.LCFI40
 2530 031c 04000000 		.4byte	.LCFI41
 2531 0320 0200     		.2byte	0x2
 2532 0322 7D       		.byte	0x7d
 2533 0323 08       		.sleb128 8
 2534 0324 04000000 		.4byte	.LCFI41
 2535 0328 06000000 		.4byte	.LCFI42
 2536 032c 0200     		.2byte	0x2
 2537 032e 7D       		.byte	0x7d
 2538 032f 18       		.sleb128 24
 2539 0330 06000000 		.4byte	.LCFI42
 2540 0334 A4000000 		.4byte	.LFE15
 2541 0338 0200     		.2byte	0x2
 2542 033a 77       		.byte	0x77
 2543 033b 18       		.sleb128 24
 2544 033c 00000000 		.4byte	0
 2545 0340 00000000 		.4byte	0
 2546              	.LLST16:
 2547 0344 00000000 		.4byte	.LFB16
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 60


 2548 0348 02000000 		.4byte	.LCFI43
 2549 034c 0200     		.2byte	0x2
 2550 034e 7D       		.byte	0x7d
 2551 034f 00       		.sleb128 0
 2552 0350 02000000 		.4byte	.LCFI43
 2553 0354 04000000 		.4byte	.LCFI44
 2554 0358 0200     		.2byte	0x2
 2555 035a 7D       		.byte	0x7d
 2556 035b 10       		.sleb128 16
 2557 035c 04000000 		.4byte	.LCFI44
 2558 0360 06000000 		.4byte	.LCFI45
 2559 0364 0200     		.2byte	0x2
 2560 0366 7D       		.byte	0x7d
 2561 0367 28       		.sleb128 40
 2562 0368 06000000 		.4byte	.LCFI45
 2563 036c 98000000 		.4byte	.LFE16
 2564 0370 0200     		.2byte	0x2
 2565 0372 77       		.byte	0x77
 2566 0373 28       		.sleb128 40
 2567 0374 00000000 		.4byte	0
 2568 0378 00000000 		.4byte	0
 2569              	.LLST17:
 2570 037c 00000000 		.4byte	.LFB17
 2571 0380 02000000 		.4byte	.LCFI46
 2572 0384 0200     		.2byte	0x2
 2573 0386 7D       		.byte	0x7d
 2574 0387 00       		.sleb128 0
 2575 0388 02000000 		.4byte	.LCFI46
 2576 038c 04000000 		.4byte	.LCFI47
 2577 0390 0200     		.2byte	0x2
 2578 0392 7D       		.byte	0x7d
 2579 0393 0C       		.sleb128 12
 2580 0394 04000000 		.4byte	.LCFI47
 2581 0398 06000000 		.4byte	.LCFI48
 2582 039c 0200     		.2byte	0x2
 2583 039e 7D       		.byte	0x7d
 2584 039f 20       		.sleb128 32
 2585 03a0 06000000 		.4byte	.LCFI48
 2586 03a4 80000000 		.4byte	.LFE17
 2587 03a8 0200     		.2byte	0x2
 2588 03aa 77       		.byte	0x77
 2589 03ab 20       		.sleb128 32
 2590 03ac 00000000 		.4byte	0
 2591 03b0 00000000 		.4byte	0
 2592              		.section	.debug_aranges,"",%progbits
 2593 0000 A4000000 		.4byte	0xa4
 2594 0004 0200     		.2byte	0x2
 2595 0006 00000000 		.4byte	.Ldebug_info0
 2596 000a 04       		.byte	0x4
 2597 000b 00       		.byte	0
 2598 000c 0000     		.2byte	0
 2599 000e 0000     		.2byte	0
 2600 0010 00000000 		.4byte	.LFB0
 2601 0014 24000000 		.4byte	.LFE0-.LFB0
 2602 0018 00000000 		.4byte	.LFB1
 2603 001c C0010000 		.4byte	.LFE1-.LFB1
 2604 0020 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 61


 2605 0024 20000000 		.4byte	.LFE2-.LFB2
 2606 0028 00000000 		.4byte	.LFB3
 2607 002c 18000000 		.4byte	.LFE3-.LFB3
 2608 0030 00000000 		.4byte	.LFB4
 2609 0034 1C000000 		.4byte	.LFE4-.LFB4
 2610 0038 00000000 		.4byte	.LFB5
 2611 003c 1C000000 		.4byte	.LFE5-.LFB5
 2612 0040 00000000 		.4byte	.LFB6
 2613 0044 48000000 		.4byte	.LFE6-.LFB6
 2614 0048 00000000 		.4byte	.LFB7
 2615 004c 44000000 		.4byte	.LFE7-.LFB7
 2616 0050 00000000 		.4byte	.LFB8
 2617 0054 1C000000 		.4byte	.LFE8-.LFB8
 2618 0058 00000000 		.4byte	.LFB9
 2619 005c 30000000 		.4byte	.LFE9-.LFB9
 2620 0060 00000000 		.4byte	.LFB10
 2621 0064 2C000000 		.4byte	.LFE10-.LFB10
 2622 0068 00000000 		.4byte	.LFB11
 2623 006c 1C000000 		.4byte	.LFE11-.LFB11
 2624 0070 00000000 		.4byte	.LFB12
 2625 0074 1C000000 		.4byte	.LFE12-.LFB12
 2626 0078 00000000 		.4byte	.LFB13
 2627 007c 30000000 		.4byte	.LFE13-.LFB13
 2628 0080 00000000 		.4byte	.LFB14
 2629 0084 2C000000 		.4byte	.LFE14-.LFB14
 2630 0088 00000000 		.4byte	.LFB15
 2631 008c A4000000 		.4byte	.LFE15-.LFB15
 2632 0090 00000000 		.4byte	.LFB16
 2633 0094 98000000 		.4byte	.LFE16-.LFB16
 2634 0098 00000000 		.4byte	.LFB17
 2635 009c 80000000 		.4byte	.LFE17-.LFB17
 2636 00a0 00000000 		.4byte	0
 2637 00a4 00000000 		.4byte	0
 2638              		.section	.debug_ranges,"",%progbits
 2639              	.Ldebug_ranges0:
 2640 0000 00000000 		.4byte	.LFB0
 2641 0004 24000000 		.4byte	.LFE0
 2642 0008 00000000 		.4byte	.LFB1
 2643 000c C0010000 		.4byte	.LFE1
 2644 0010 00000000 		.4byte	.LFB2
 2645 0014 20000000 		.4byte	.LFE2
 2646 0018 00000000 		.4byte	.LFB3
 2647 001c 18000000 		.4byte	.LFE3
 2648 0020 00000000 		.4byte	.LFB4
 2649 0024 1C000000 		.4byte	.LFE4
 2650 0028 00000000 		.4byte	.LFB5
 2651 002c 1C000000 		.4byte	.LFE5
 2652 0030 00000000 		.4byte	.LFB6
 2653 0034 48000000 		.4byte	.LFE6
 2654 0038 00000000 		.4byte	.LFB7
 2655 003c 44000000 		.4byte	.LFE7
 2656 0040 00000000 		.4byte	.LFB8
 2657 0044 1C000000 		.4byte	.LFE8
 2658 0048 00000000 		.4byte	.LFB9
 2659 004c 30000000 		.4byte	.LFE9
 2660 0050 00000000 		.4byte	.LFB10
 2661 0054 2C000000 		.4byte	.LFE10
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 62


 2662 0058 00000000 		.4byte	.LFB11
 2663 005c 1C000000 		.4byte	.LFE11
 2664 0060 00000000 		.4byte	.LFB12
 2665 0064 1C000000 		.4byte	.LFE12
 2666 0068 00000000 		.4byte	.LFB13
 2667 006c 30000000 		.4byte	.LFE13
 2668 0070 00000000 		.4byte	.LFB14
 2669 0074 2C000000 		.4byte	.LFE14
 2670 0078 00000000 		.4byte	.LFB15
 2671 007c A4000000 		.4byte	.LFE15
 2672 0080 00000000 		.4byte	.LFB16
 2673 0084 98000000 		.4byte	.LFE16
 2674 0088 00000000 		.4byte	.LFB17
 2675 008c 80000000 		.4byte	.LFE17
 2676 0090 00000000 		.4byte	0
 2677 0094 00000000 		.4byte	0
 2678              		.section	.debug_line,"",%progbits
 2679              	.Ldebug_line0:
 2680 0000 33020000 		.section	.debug_str,"MS",%progbits,1
 2680      02004C00 
 2680      00000201 
 2680      FB0E0D00 
 2680      01010101 
 2681              	.LASF42:
 2682 0000 4144435F 		.ascii	"ADC_SAR_Seq_0_SetLimitMask\000"
 2682      5341525F 
 2682      5365715F 
 2682      305F5365 
 2682      744C696D 
 2683              	.LASF48:
 2684 001b 4144435F 		.ascii	"ADC_SAR_Seq_0_CountsTo_mVolts\000"
 2684      5341525F 
 2684      5365715F 
 2684      305F436F 
 2684      756E7473 
 2685              	.LASF27:
 2686 0039 4144435F 		.ascii	"ADC_SAR_Seq_0_StartConvert\000"
 2686      5341525F 
 2686      5365715F 
 2686      305F5374 
 2686      61727443 
 2687              	.LASF61:
 2688 0054 433A5C45 		.ascii	"C:\\Enhed\\Enhed.cydsn\000"
 2688      6E686564 
 2688      5C456E68 
 2688      65642E63 
 2688      7964736E 
 2689              	.LASF15:
 2690 0069 666C6F61 		.ascii	"float\000"
 2690      7400
 2691              	.LASF41:
 2692 006f 68696768 		.ascii	"highLimit\000"
 2692      4C696D69 
 2692      7400
 2693              	.LASF55:
 2694 0079 4144435F 		.ascii	"ADC_SAR_Seq_0_channelsConfig\000"
 2694      5341525F 
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 63


 2694      5365715F 
 2694      305F6368 
 2694      616E6E65 
 2695              	.LASF46:
 2696 0096 4144435F 		.ascii	"ADC_SAR_Seq_0_SetGain\000"
 2696      5341525F 
 2696      5365715F 
 2696      305F5365 
 2696      74476169 
 2697              	.LASF4:
 2698 00ac 6C6F6E67 		.ascii	"long int\000"
 2698      20696E74 
 2698      00
 2699              	.LASF52:
 2700 00b5 75566F6C 		.ascii	"uVolts\000"
 2700      747300
 2701              	.LASF3:
 2702 00bc 73686F72 		.ascii	"short unsigned int\000"
 2702      7420756E 
 2702      7369676E 
 2702      65642069 
 2702      6E7400
 2703              	.LASF18:
 2704 00cf 63686172 		.ascii	"char\000"
 2704      00
 2705              	.LASF53:
 2706 00d4 4144435F 		.ascii	"ADC_SAR_Seq_0_CountsTo_Volts\000"
 2706      5341525F 
 2706      5365715F 
 2706      305F436F 
 2706      756E7473 
 2707              	.LASF35:
 2708 00f1 4144435F 		.ascii	"ADC_SAR_Seq_0_Init\000"
 2708      5341525F 
 2708      5365715F 
 2708      305F496E 
 2708      697400
 2709              	.LASF60:
 2710 0104 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR_Seq_0.c\000"
 2710      6E657261 
 2710      7465645F 
 2710      536F7572 
 2710      63655C50 
 2711              	.LASF29:
 2712 012d 73746174 		.ascii	"status\000"
 2712      757300
 2713              	.LASF57:
 2714 0134 4144435F 		.ascii	"ADC_SAR_Seq_0_offset\000"
 2714      5341525F 
 2714      5365715F 
 2714      305F6F66 
 2714      66736574 
 2715              	.LASF14:
 2716 0149 666C6F61 		.ascii	"float32\000"
 2716      74333200 
 2717              	.LASF22:
 2718 0151 746D7052 		.ascii	"tmpRegVal\000"
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 64


 2718      65675661 
 2718      6C00
 2719              	.LASF28:
 2720 015b 4144435F 		.ascii	"ADC_SAR_Seq_0_StopConvert\000"
 2720      5341525F 
 2720      5365715F 
 2720      305F5374 
 2720      6F70436F 
 2721              	.LASF30:
 2722 0175 4144435F 		.ascii	"ADC_SAR_Seq_0_IsEndConversion\000"
 2722      5341525F 
 2722      5365715F 
 2722      305F4973 
 2722      456E6443 
 2723              	.LASF1:
 2724 0193 756E7369 		.ascii	"unsigned char\000"
 2724      676E6564 
 2724      20636861 
 2724      7200
 2725              	.LASF24:
 2726 01a1 4144435F 		.ascii	"ADC_SAR_Seq_0_Start\000"
 2726      5341525F 
 2726      5365715F 
 2726      305F5374 
 2726      61727400 
 2727              	.LASF45:
 2728 01b5 6F666673 		.ascii	"offset\000"
 2728      657400
 2729              	.LASF5:
 2730 01bc 6C6F6E67 		.ascii	"long unsigned int\000"
 2730      20756E73 
 2730      69676E65 
 2730      6420696E 
 2730      7400
 2731              	.LASF13:
 2732 01ce 696E7433 		.ascii	"int32\000"
 2732      3200
 2733              	.LASF38:
 2734 01d4 4144435F 		.ascii	"ADC_SAR_Seq_0_SetLowLimit\000"
 2734      5341525F 
 2734      5365715F 
 2734      305F5365 
 2734      744C6F77 
 2735              	.LASF39:
 2736 01ee 6C6F774C 		.ascii	"lowLimit\000"
 2736      696D6974 
 2736      00
 2737              	.LASF31:
 2738 01f7 4144435F 		.ascii	"ADC_SAR_Seq_0_GetResult16\000"
 2738      5341525F 
 2738      5365715F 
 2738      305F4765 
 2738      74526573 
 2739              	.LASF16:
 2740 0211 646F7562 		.ascii	"double\000"
 2740      6C6500
 2741              	.LASF36:
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 65


 2742 0218 4144435F 		.ascii	"ADC_SAR_Seq_0_SetChanMask\000"
 2742      5341525F 
 2742      5365715F 
 2742      305F5365 
 2742      74436861 
 2743              	.LASF47:
 2744 0232 61646347 		.ascii	"adcGain\000"
 2744      61696E00 
 2745              	.LASF10:
 2746 023a 75696E74 		.ascii	"uint16\000"
 2746      313600
 2747              	.LASF49:
 2748 0241 61646343 		.ascii	"adcCounts\000"
 2748      6F756E74 
 2748      7300
 2749              	.LASF11:
 2750 024b 75696E74 		.ascii	"uint32\000"
 2750      333200
 2751              	.LASF25:
 2752 0252 4144435F 		.ascii	"ADC_SAR_Seq_0_Enable\000"
 2752      5341525F 
 2752      5365715F 
 2752      305F456E 
 2752      61626C65 
 2753              	.LASF8:
 2754 0267 756E7369 		.ascii	"unsigned int\000"
 2754      676E6564 
 2754      20696E74 
 2754      00
 2755              	.LASF23:
 2756 0274 636F756E 		.ascii	"counts\000"
 2756      747300
 2757              	.LASF7:
 2758 027b 6C6F6E67 		.ascii	"long long unsigned int\000"
 2758      206C6F6E 
 2758      6720756E 
 2758      7369676E 
 2758      65642069 
 2759              	.LASF51:
 2760 0292 4144435F 		.ascii	"ADC_SAR_Seq_0_CountsTo_uVolts\000"
 2760      5341525F 
 2760      5365715F 
 2760      305F436F 
 2760      756E7473 
 2761              	.LASF58:
 2762 02b0 4144435F 		.ascii	"ADC_SAR_Seq_0_countsPer10Volt\000"
 2762      5341525F 
 2762      5365715F 
 2762      305F636F 
 2762      756E7473 
 2763              	.LASF40:
 2764 02ce 4144435F 		.ascii	"ADC_SAR_Seq_0_SetHighLimit\000"
 2764      5341525F 
 2764      5365715F 
 2764      305F5365 
 2764      74486967 
 2765              	.LASF54:
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 66


 2766 02e9 766F6C74 		.ascii	"volts\000"
 2766      7300
 2767              	.LASF33:
 2768 02ef 6368616E 		.ascii	"chan\000"
 2768      00
 2769              	.LASF50:
 2770 02f4 6D566F6C 		.ascii	"mVolts\000"
 2770      747300
 2771              	.LASF20:
 2772 02fb 73697A65 		.ascii	"sizetype\000"
 2772      74797065 
 2772      00
 2773              	.LASF6:
 2774 0304 6C6F6E67 		.ascii	"long long int\000"
 2774      206C6F6E 
 2774      6720696E 
 2774      7400
 2775              	.LASF37:
 2776 0312 6D61736B 		.ascii	"mask\000"
 2776      00
 2777              	.LASF21:
 2778 0317 63684E75 		.ascii	"chNum\000"
 2778      6D00
 2779              	.LASF56:
 2780 031d 4144435F 		.ascii	"ADC_SAR_Seq_0_initVar\000"
 2780      5341525F 
 2780      5365715F 
 2780      305F696E 
 2780      69745661 
 2781              	.LASF32:
 2782 0333 7265744D 		.ascii	"retMode\000"
 2782      6F646500 
 2783              	.LASF2:
 2784 033b 73686F72 		.ascii	"short int\000"
 2784      7420696E 
 2784      7400
 2785              	.LASF43:
 2786 0345 4144435F 		.ascii	"ADC_SAR_Seq_0_SetSatMask\000"
 2786      5341525F 
 2786      5365715F 
 2786      305F5365 
 2786      74536174 
 2787              	.LASF9:
 2788 035e 75696E74 		.ascii	"uint8\000"
 2788      3800
 2789              	.LASF59:
 2790 0364 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 2790      4320342E 
 2790      372E3320 
 2790      32303133 
 2790      30333132 
 2791 0397 616E6368 		.ascii	"anch revision 196615]\000"
 2791      20726576 
 2791      6973696F 
 2791      6E203139 
 2791      36363135 
 2792              	.LASF44:
ARM GAS  C:\Users\BJRN~1\AppData\Local\Temp\cciRdOcr.s 			page 67


 2793 03ad 4144435F 		.ascii	"ADC_SAR_Seq_0_SetOffset\000"
 2793      5341525F 
 2793      5365715F 
 2793      305F5365 
 2793      744F6666 
 2794              	.LASF19:
 2795 03c5 72656733 		.ascii	"reg32\000"
 2795      3200
 2796              	.LASF12:
 2797 03cb 696E7431 		.ascii	"int16\000"
 2797      3600
 2798              	.LASF0:
 2799 03d1 7369676E 		.ascii	"signed char\000"
 2799      65642063 
 2799      68617200 
 2800              	.LASF34:
 2801 03dd 72657375 		.ascii	"result\000"
 2801      6C7400
 2802              	.LASF26:
 2803 03e4 4144435F 		.ascii	"ADC_SAR_Seq_0_Stop\000"
 2803      5341525F 
 2803      5365715F 
 2803      305F5374 
 2803      6F7000
 2804              	.LASF17:
 2805 03f7 696E7436 		.ascii	"int64\000"
 2805      3400
 2806              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
